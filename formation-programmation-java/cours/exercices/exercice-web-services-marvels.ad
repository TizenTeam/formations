= TP Web Services
:author: Arnaud Tournier
:email: ltearno@gmail.com
:toc: macro
:toc-title: TP Web Services
:imagesdir: images-struts
:source-highlighter: highlightjs

LTE Consulting (C) - 2017

toc::[]

== Exercice

**ATTENTION POUR CE PROJET IL FAUT UTILISER WILDFLY EN VERSION 10 AU MOINS**

Télécharger le projet initial disponible à cette https://github.com/ltearno/formation-programmation-java/blob/master/projets/webservices/marvels.zip[url].

=== Implémentation de nouvelles méthodes de service

Dans le projet `marvels-store`, implémenter les opérations CRUD manquantes au service Web (`findById`, `create`, `update` et `delete`).

Utiliser PostMan pour envoyer les requêtes au serveur et vérifier qu'il fonctionne correctement.

Implémenter également une fonction de recherche par nom, qui n'est pas sensible à la casse.

=== Appel d'un Web Service depuis un navigateur

Dans le projet `marvels-ui`.

Importer JQuery dans `marvels-ui`.

Intégrer JQuery dans la page `index.html`.

En JS et avec JQuery faire un appel au WS Marvels du projet `marvels-store` pour obtenir les marvels dnas le navigateur.

Afficher ces Marvels dans la page, toujours avec JQuery.

==== Utilisation des autres méthodes du CRUD

Dans le projet `marvels-ui`, utiliser toutes les méthodes du service web côté navigateur (appels ajax an JS ou avec JQuery) pour manipuler la collection de marvels (ajout, edition, suppression).

=== Consommation d'un client REST

Ajouter la dépendance suivante dans le `pom.xml` du projet `marvel-store` :

[source]
----
<dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-client</artifactId>
</dependency>
----

S'enregistrer sur `developer.marvels.com` pour obtenir une clé d'API qui vous donnera le droit d'utiliser leurs services. Il faut pour cela accéder à l'url http://developer.marvel.com/ et cliquer sur le lien "Get a Key".

Suivre les instructions et garder précieusement dans un fichier les deux clés privée et publique.

Commencer par effectuer quelques requêtes avec Postman en s'inspirant des exemples donnés par le site Marvel https://developer.marvel.com/docs[ici].

Par exemple, vous pouvez tester l'url https://gateway.marvel.com:443/v1/public/characters?apikey=VOTRE_CLE_PUBLIQUE

**ATTENTION** Il faut envoyer toujours envoyer (pour marvel.com) trois paramètres obligatoire :

- `ts` : un timestamp. Vous pouvez choisir une valeur entière par exemple 1. Marvels n'est censé accepter qu'une requête par timestamp, donc théoriquement la requête suivante doit contenir un timestamp à 2.
- `apikey` : la clé publique que vous a fourni marvel.com.
- `hash` : une valeur que vous calculez, qui doit être égale au hash MD5 de la chaîne de caractère obtenue en concaténant TIMESTAMP + CLE_PRIVE + CLE_PUBLIQUE.

**NOTE** : le site https://www.md5.fr/ permet de calculer la hash MD5 d'une chaine de caractères.

Refaites les requêtes avec Postman et vérifier que cela fonctionne.

Observer la structure des données reçues.

Dans le projet `marvels-store`, définir le contrat pour l'API de `marvels.com` sous la forme d'une interface Java compatible avec `JAX-RS`.

Toujours dans ce projet, définir les classes Java correspondant aux données envoyées par le service `marvel.com`. Voici un court début :

[source,language=java]
----
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

// Permet d'ignorer les champs dans le JSON qui ne sont pas définis dans la classe Java
@JsonIgnoreProperties( ignoreUnknown = true )
public class MarvelCharactersResult
{
	public int code;
	public String status;
}
----

Vous aurez besoin pour que le code précédent fonctionne de rajouter en dépendance dans le `pom.xml` :

[source]
----
<dependency>
	<groupId>com.fasterxml.jackson.core</groupId>
	<artifactId>jackson-annotations</artifactId>
	<version>2.8.6</version>
</dependency>
----

Vous aurez besoin pour envoyer les requêtes vers marvel de calculer des checksum MD5. Voici une classe java permettant de faire ceci :

[source,language=java]
----
public class MD5Tools
{
	public static String md5( String input )
	{
		if( input == null )
			return null;

		try
		{
			byte[] bytes = input.getBytes( "UTF-8" );

			MessageDigest md = MessageDigest.getInstance( "MD5" );
			byte[] digest = md.digest( bytes );

			StringBuilder builder = new StringBuilder();
			for( byte b : digest )
			{
				String part = Integer.toHexString( b & 0xff );
				if( part.length() == 1 )
					part = "0" + part;

				builder.append( part );
			}

			return builder.toString();
		}
		catch( Exception e )
		{
			return null;
		}
	}
}
----

Dans l'EJB `MarvelsDataStore`, ajouter une méthode qui crée un client REST et appelle `developer.marvels.com` pour obtenir les marvels et mettre à jour la liste des marvels interne à `MarvelsDataStore`.

Permettre à un client externe de déclencher cette méthode (en ajoutant une méthode dans le service web qui délègue à celle-ci) à partir d'un bouton 'IMPORTER' dans la page web de marvels-ui.