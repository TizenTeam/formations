= Cours de programmation avec Struts 2
:author: Arnaud Tournier
:email: ltearno@gmail.com
:toc: macro
:toc-title: Cours de programmation avec Struts 2
:imagesdir: images-struts
:source-highlighter: highlightjs

LTE Consulting (C) - 2017

toc::[]

== Exercice 1 - CRUD Marvel

Une correction est disponible https://github.com/ltearno/formation-programmation-java/tree/master/projets/struts/avengers-struts[ici].

L'objectif est d'écrire une application permettant de gérer une collection de Marvels.

Chaque Marvel possède un `id`, un `nom`, un `prénom`, un `alias` ainsi qu'une `couleur`.

L'application est construite avec Maven et utilise Struts.

Page de liste des Marvels, bouton de suppression et bouton d'ajout

Page d'ajout, retour à la page de liste

Page d'édition, retour à la page de liste

=== Création du projet

Exécuter la commande pour créer un projet vide avec l'archetype Struts.

[source]
----
mvn archetype:generate 	-DarchetypeGroupId=org.apache.struts 
						-DarchetypeArtifactId=struts2-archetype-blank 
						-DarchetypeVersion=2.3.15.1 
						-DremoteRepositories=http://struts.apache.org
----

Plus pratique à copier coller : `mvn archetype:generate -DarchetypeGroupId=org.apache.struts -DarchetypeArtifactId=struts2-archetype-blank -DarchetypeVersion=2.3.15.1 -DremoteRepositories=http://struts.apache.org`

Répondre aux questions. Ceci crée le projet dans un sous-répertoire.

Construire le projet pour vérifier qu'il fonctionne (`mvn install`).

=== Importation dans Eclipse

Importer le projet en tant que projet _Maven_ dans _Eclipse_.

Déployer le projet dans un serveur d'application Java EE (Tomcat ou Wildfly par exemple).

Démarrer le serveur et vérifier que l'url http://localhost:8080/struts-101-1.0-SNAPSHOT répond bien.

=== Création du modèle de données

Créer une classe `Marvel` contenant les attributs suivants :

- `id` de type `int`,
- `nom` de type `string`, 
- `prénom` de type `string`, 
- `alias` de type `string`, 
- `couleur` de type `string`.

Ecrire les getters et setters associés.

=== Utilisation de la JSTL

Pour utiliser la JSTL au lieu de la tag lib Struts, ajouter dans le fichier `pom.xml` :

[source]
----
<dependency>
	<groupId>javax.servlet</groupId>
	<artifactId>jstl</artifactId>
	<version>1.2</version>
</dependency>
----

=== Préliminaires

Créer une action `AvengersAction` (qui hérite de `ActionSupport`) et une page `avengers.jsp` dont le rôle sera d'afficher une liste d'avengers.

=== Consultation

Dans la classe `AvengersAction`, écrire une méthode `getAvengers()` qui renvoie une liste d'avengers. Les données de la liste peuvent être écrites _en dur_ pour le moment.

Récupérer ces avengers dans la partie vue (le fichier `avengers.jsp`) et les afficher.

Vérifier que cela fonctionne.

==== Mise en place des données dans la session

La liste d'avengers sera stockée dans la session utilisateur (voir le cours sur la façon d'accéder à la session Servlet).

Choisir la valeur de la clé utilisée pour stocker la liste des avengers dans la session, et la représenter dans une constante `SESSION_KEY_AVENGERS` au sein de la classe `AvengersAction`.

Faire le nécessaire pour recevoir la session. Dans la méthode `setSession`, vérifier qu'à la clé `SESSION_KEY_AVENGERS` une liste existe. Si ce n'est pas le cas, créer une liste vide et l'enregistrer dans la session.

Modifier la méthode `getAvengers()` de façon à renvoyer la liste d'avengers contenue dans la session.

NOTE:
Afin de faciliter le développement, il est possible d'initialiser la liste avec quelques Avengers _en dur_ de façon à voir les avengers dans la vue.

=== Effacement

Dans la vue JSP précédente, ajouter un bouton de suppression sur chaque avenger.

Indiquer une URL pour chaque bouton du type `EffacerAvenger.action?id=AVENGER_ID`.

Ajouter une nouvelle classe d'action `EffacerAvengerAction` et configurer `struts.xml` pour brancher l'url précédente sur la classe d'action.

Configurer `struts.xml` pour que cette action soit chainée avec la vue `avengers.jsp`.

=== Nettoyage, refactoring

Il est maintenant temps de nettoyer le projet...

=== Modification

Implémenter une action et sa vue, destinées à la modification d'un Avenger.

=== Création

Faire de même pour la création (en réutilisant la même vue).

== Connexion utilisateur

Avant de permettre à l'utilisateur de faire son chemin normal dans l'application, on souhaite s'assurer que celui-ci a renseigné son nom au préalable.

Ecrire une action et une JSP qui permettent à l'utilisateur de se présenter (`IdentificationAction` et `Identification.jsp` par exemple). Cette action positionnera le nom de l'utilisateur dans la session (pour ceci, établir au préalable le nom de la clé qui sera utilisée au sein de l'application pour stocker le nom d'utilisateur dans la session).

Ajouter un nouveau package dans `struts.xml` avec le namespace `identification`. Dans ce namespace, enregistrer l'action `IdentificationAction` qui permet à l'utilisateur de s'identifier ainsi que sa JSP pour le rendu HTML.

Toujours dans ce package, faire en sorte que quand l'utilisateur envoie son nom, il soit redirigé vers l'action "consultation" du namespace "/".

Ecrire un intercepteur `IdentificationInterceptor` qui permette de vérifier que le nom de l'utilisateur est bien présent en session. Dans le cas où l'utilisateur n'est pas identifié, l'intercepteur n'exécute pas l'action en cours et renvoie la clé "login_required".

Configurer `struts.xml` pour intégrer l'intercepteur de login dans la pile d'intercepteurs du package par défaut.

Faire en sorte que l'utilisateur soit redirigé vers l'action d'identification quand l'intercepteur renvoie la clé de navigation "login_required".

_Vous pouvez vous inspirer du tutoriel décrit http://www.journaldev.com/2210/struts-2-interceptor-example[ici]_.