






SYNTAXE

- Définition

[modificateurs] TYPE_RETOUR NOM ( PARAMETRES )
{
	// code de la méthode
}

PARAMETRES : TYPE_DU_PARAMETRES NOM, ...

exemples

public static int max( int a, int b )
{
	if( a > b )
		return a;
	else if( b > a )
		return b;
		
	// ERREUR : tous les chemins d'exécution de la
	// méthode ne retournent pas de valeur.
	
	// on rajoute
	return b;
}


APPELER UNE METHODE


Pour appeler une méthode, on utilise son NOM et on fournit la valeur des paramètres (avec le bon type) requis par la méthode.

Le corps de la méthode est exécuté, les paramètres ayant pris les valeurs données par l'"appelant".

L'expression de l'appel de la méthode est évalué à la valeur de retour de celle-ci.

exemple :

int a = 3;
// ...
a = 5;
int m = max( 2, a );

La variable `a` est déclarée est affectée à la valeur 3.
La variable `a` esr affectée à la valeur 5.
La méthode `max` est appelée avec en paramètre les valeurs suivantes : 2 et 5.
	Le corps de la méthode `max` s'exécute avec `a`=2 et `b`=5 dans le corps de la méthode.
	Quand l'instruction `return` est rencontrée, l'exécution de la méthode s'arrête et la valeur de retour est produite. C'est la valeur juste à droite du `return`.
L'expression `max( 2, a )` dans le code appelant est évaluée à la valeur de retour, c'est-à-dire dans ce cas : 5.
La variable `m` est donc affectée à la valeur 5.

Pendant l'exécution de la méthode `max`, voici ce qui se passe :

// le code appelant : max( 2, a [vaut 5] )	
	
public static int max( int a [vaut 2], int b [vaut 5] )
{
	// on commence l'exécution
	if( a > b ) 			// 2 > 5 ? FAUX, on passe au `else` suivant
		return a;
	else if( b > a ) 	// 5 > 2 ? VRAI, on exécute l'instruction suivante
		return b; 		// on arrête l'exécution et on produit la valeur 5 (valeur de `b`)
	return b;
}

METHODES RECURSIVES

Méthode qui s'appelle elle-même.

Exemple :

int somme( int n )
{
	// cas de terminaison
	if( n == 0 )
		return 0;
	
	// cas général
	return n + somme( n - 1 );
}


POINT D'ATTENTION

Lors de l'appel d'une méthode, ses paramètres sont **passés par valeur**.

Exemple : 

void uneMethode( int i )
{
	i = 5;
}

int i = 3;
uneMethode( i );
// i vaut 3



















LES TABLEAUX

Permet de stocker plusieurs valeurs dans une zone contigue de mémoire.

Au niveau de la mémoire, si je crée un tableau de 5 int, on a en mémoire :

index de la cellule:		Cellule du tableau
0: 							valeur 1
1: 							valeur 2
2: 							valeur 3
3: 							valeur 4
4: 							valeur 5

En java, on peut créer des tableaux en spécifiant la taille désirée, mais une fois créé un tableau ne peut pas changer de taille.

Les cases du tableau sont appelées 'cellules'. Elles sont numérotées à partir de 0. Donc un tableau de taille N contient N cellules numérotées de 0 à N-1. Chaque cellule contient une valeur.

Dans un tableau toutes les cellules sont du même type.

Les tableaux sont un type en Java.

DECLARATION D'UNE VARIABLE DE TYPE TABLEAU

Toutes les cellules d'un tableau ont le même type, c'est le type du tableau :

TYPE_DU_TABLEAU[] NOM_DE_LA_VARIABLE;

// tableauEntiers est une variable de type tableau d'`int`.
int[] tableauEntiers; 

long[] tableauDeLongs;

CREATION D'UN TABLEAU

Maintenant qu'on a une variable prête à réceptionner un tableau, il faut créer ce tableau.

- Première façon :

		new TYPE_DU_TABLEAU[TAILLE_DU_TABLEAU];

		// les cellules sont initialisées à 0
		tableauEntiers = new int[50];

- Deuxième façon :

		// crée un tableau d'entiers avec 4 cellules contenant
		// successivement les valeurs 3, 5, 2 et 6
		tableauEntiers = new int[] { 3, 5, 2, 6 };

ECRITURE DANS UN TABLEAU

	NOM_DE_LA_VARIABLE[INDEX DE LA CELLULE] = VALEUR;

	// affecte la valeur de la 4ème cellulle à 3
	tableauEntiers[3] = 3;

	// affecte la valeur de la 3ème cellulle
	tableauEntiers[2] = somme( max( 3, 5 ), 8 );

LIRE DANS UN TABLEAU

C'est la même syntaxe :

	NOM_DE_LA_VARIABLE[INDEX DE LA CELLULE]

Exemple :

	for( int i=0; i<5; i++ )
		System.out.println( i + ": " + tableauEntiers[i] )

TAILLE D'UN TABLEAU

Le type d'une variable tableau ne spécifie pas la taille du tableau (int[] maVariable).

Si on veut connaitre la taille du tableau, on utilise sa méthode `length()` :

		int[] tableau = new ....
		int tailleTableau = tableau.length;

POINT D'ATTENTION

Si on essaie d'accéder à des cellules qui n'existent pas (index < 0  ou index >= TAILLE_DU_TABLEAU), une "exception" est levée, ce qui a pour effet d'arrêter l'exécution du programme. C'est une erreur critique!

	int[] t = new int[4];
	
	// OK
	t[0] = 4;
	
	// ERREUR ! La cellule 4 n'existe pas
	t[4] = 0;
	
	// ERREUR ! La numérotation commence TOUJOURS à zéro
	t[-1] = 3;
	
	// ERREUR, on ne peut affecter à une variable
	// que des valeurs du type de celle-ci
	int[] f = new long[10];

	
	EXERCICE
	
	Dans la méthode `main` :
	
	- définir une variable `t` du type tableau de long.
	- l'affecter à un nouveau tableau de taille 13.
	- remplir ce tableau : la valeur de chaque cellule doit être égal à deux fois son index.
	- lire chaque cellule du tableau et afficher son contenu.
	
	
	
	
	EXERCICE : CODEX
	
	Il s'agit de transmettre des messages secrets entre deux parties.
	
	Algorithme de chiffrement CODEX

	Le principe est très simple :
		- on souhaite chiffrer une chaine de caractères.
		- pour cela on dispose d'une table de correspondance :
			a => g
			b => h
			c => i
			...
			z => f
		- on crée un chaine de caractère dans laquelle chaque caractère de la chaine initiale est remplacé par son correspondant dans la table.
		
		- ecrire au moins deux méthodes:
		
				// chiffre le message et le retourne
				String chiffrer( String messageEnClair )
				{
					...
				}
				
				// déchiffre le message et le retourne
				String dechiffrer( String messageChiffre )
				{
					...
				}
			
		- dans la méthode `main`, écrire un programme du style :

				String clair = "Bonjour mon général";
				
				String chiffre = chiffrer( clair );
				
				// afficher le texte chiffré
				// afficher le texte déchiffré
				System.out.println( dechiffrer( chiffre ) );
	


EXERCICE : TRI NAIF D'UN TABLEAU

En entrée : un tableau d'entiers, par exemple :

int[] t = new int[] { 12, 4, 6, 2, 88, 12, 14 };

On veut obtenir un tableau comme ceci :

{ 2, 4, 6, 12, 12, 14, 88 }

ALGORITHME :

- on considère que le tableau est trié jusqu'à la cellule `i`. Sachant qu'au départ, i vaut 0.

- écrire les méthodes suivantes :
	// renvoie l'index de la cellule avec la plus petite valeur
	int indexCelluleMin( int[] tableau, int indexDebutRecherche )
	
	ALGO :
	
		iMin = indexDebutRecherche
		POUR i: indexDebutRecherche+1 JUSQU'A t.length()
			SI t[i] < t[iMin]
				iMin = i
		RETOURNER iMin
	
	// échange les valeurs de deux cellules dans un tableau
	void echange( int[] tableau, int pos1, int pos2 )



	
	EXERCICE : TRI PAR DICHOTOMIE
	
Au lieu de trier un tableau complet, on coupe le tableau en deux (récursivement) et on recombine les tableaux triés.

ALGO :

	METHODE TRIER_TABLEAU( int[] t ), retourne un tableau trié
		SI t.length() <= 1
		ALORS
			// le tableau est déjà trié, on le retourne
			RETOURNER t;
		FIN_SI
		
		tA = TRIER_TABLEAU( premierMoitie( t ) );
		tB = TRIER_TABLEAU( deuxiemeMoitie( t ) );
		
		resultat = RECOMBINER( tA, tB );
		
		RETOURNER resultat;

	Il faut donc écrire aussi les méthodes :
	
		- premiereMoitie et deuxiemeMoitie
		- RECOMBINER
	
	

	
Illustration

https://fr.wikipedia.org/wiki/Algorithme_de_tri
https://www.toptal.com/developers/sorting-algorithms/
https://www.youtube.com/watch?v=lyZQPjUT5B4

	
	


	
	
	TABLEAU MULTIDIMENSIONNELS



