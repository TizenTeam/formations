Ecrire une classe Compte


Compte
	- iban : String
	- solde : int
	
	+ Compte( iban: String )
	
	// ajoute ou retire le montant au solde
	+ modificationSolde( int montant )
	// affiche l'iban et le solde
	+ afficher()
	
	//// fait transiter le montant entre deux comptes
	<<static>> effectuerVirement(
		debiteur: Compte,
		crediteur: Compte,
		montant: int
	)

Dans la méthode principale, on écrit :

	Compte a = new Compte( "AAAAA" );
	Compte b = new Compte( "BBBBB" );
	
	Compte.effectuerVirement( a, b, 500 );
	
	a.afficher();
	b.afficher();
	
	
	
	
	
	
	
	
Les Collections

- Listes : ranger des objets sous forme d'une séquence (les objets de la liste sont indexés)
	Déclaration : List<Integer>, List<String>, List<Personne>, ...
	List<T> : c'est une interface : size(), get(int index), add(T item),... (javadoc)
	En Java on a plusieurs implémentations de l'interface List<T> et on utilise le plus souvent ArrayList<T>.

- Ensembles (java.util.Set<T>) : permet de stocker un ensemble non ordonné d'objets.
	En Java on a plusieurs implémentations de l'interface Set<T>, on utilise le plus souvent la classe java.util.HashSet<T>.
	
	Méthodes principales (les plus usuelles)
	
	int size() : renvoie le nombre d'éléments dans l'ensemble
	void add(T item) : ajoute un élément dans l'ensemble
	void remove(T item) : retire ...
	boolean contains(T item) : teste si un objet se trouve dans l'ensemble
	--> javadoc
	
	Exemple :
	
	// import....
	
	Set<String> couleurs = new HashSet<>();
	couleurs.add("bleu");
	couleurs.add("rouge");
	couleurs.add("vert");
	
	boolean test = couleurs.contains("Rouge");
	// test vaut false
	
	test = couleurs.contains("vert");
	// test vaut true
	
	// parcourir l'ensemble :
	for(String couleur : couleurs)
	{
		// la variable couleur vaudra successivement
		// "rouge", "vert", "bleu"
		// ATTENTION : pas forcément dans cet ordre
	}


- Tableaux Associcatifs, Map<K, V>

	Exemple
	
	On associe des noms à leur numéro de téléphone
	
	Map<String, String> repertoire = new HashMap<>();
	
	repertoire.put("Titi", "0765432133");
	repertoire.put("Tata", "8765664477");
	repertoire.put("Toto", "0788337744");
	repertoire.put("Tutu", "0673645378");
	
	repertoire.get("Toto"); // => "0788337744"
	repertoire.get("Robert"); // null
	
	Set<String> cles = repertoire.keySet();
	// cles est un Set<String> contenant 
	// "Titi", "Tata", "Toto" et "Tutu"
	
	for( String cle : cles )
		System.out.println(cle);
	
	Collection<String> valeurs = repertoire.values();
	// une collection contenant les numéros de téléphone
	
	for( String telephone : repertoire.values() )
		System.out.println(telephone);
	
	// Parcours des associations stockées dans la map
	for( Entry<String, String> entree : repertoire.entrySet() )
	{
		// entree référence une a une chaque association de la map
		String nom = entree.key();
		String telephone = entree.value();
	}

	
	
	
EXERCICE : Bibliothèque Audio
	
	Chanson
		- nom : String
		- dureeEnSecondes : int
		
		+ Chanson()
		+ Chanson(nom: String, dureeEnSecondes: int)
		
		// les accesseurs :
		// getNom, setNom, 
		// getDureeEnSecondes, setDureeEnSecondes
		
		+ afficher(): void
	
	Disque
		- codeBarre : String
		- nom : String
		- chansons : List<Chanson>
		
		+ Disque(codeBarre: String, nom: String)
		
		// getCodeBarre, setCodeBarre,
		// getNom, setNom
		
		+ addChanson(chanson: Chanson): void
		
		// affiche nom, codeBarre et la liste des chansons
		+ afficher(): void
		
		
		// ETAPE 2 : renvoie la duree de l'album
		// En calculant la somme de la duree de chancune des chansons
		+ getDuree(): int
		
	Bibliotheque
		// contient tous les disques de la bibliotheque
		// associe les codes barre avec les disques
		- disques: Map<String, Disque>
		
		+ ajouterDisque(disque: Disque): void
		
		// affiche les disques de la bibliothèque
		+ afficher(): void
		
		// ETAPE 2 :
		+ rechercherDisqueParCodeBarre(codeBarre: String): Disque
		+ rechercherDisqueParNom(mot: String): List<Disque>
		
		
		
	Ecrire la méthode 'main' dans une classe Application
	
		Disque d = new Disque("EFTAHHET6", "La lune");
		d.addChanson( new Chanson("Titre", 34) );
		d.addChanson( new Chanson("Titre", 34) );
		...
		
		Bibliotheque b = new Bibliotheque();
		b.ajouterDisque( d );
		
		b.afficher();
		
		// etc...
		
		System.out.println( "Duree " + d.getDureeEnSecondes() );
		
		Disque t = b.rechercherDisqueParCodeBarre("EFTAHHET6");
		t.afficher();
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	












