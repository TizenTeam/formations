= Programmation Java
:author: Arnaud Tournier - @ltearno - LTE Consulting - 2017 - Toulouse
:email: ltearno@gmail.com
:backend: revealjs
:imagesdir: images-java
:revealjs_theme: white
:revealjs_history: true
:source-highlighter: highlightjs
:revealjs_width: 1600
:revealjs_height: 1200
:revealjs_hideaddressbar: true
:revealjs_mousewheel: true
:revealjs_slidenumber: true
:revealjs_transitionspeed: zoom
:revealjs_fragments: true

== Arnaud Tournier

Email: ltearno@gmail.com

Twitter: https://twitter.com/ltearno[@ltearno]

Web: http://www.lteconsulting.fr[www.lteconsulting.fr]

**LTE Consulting** société de Développement, Conseil et Formation.

Speaker à Java One, Devoxx, GDG, JUG, GWTCon...

== L'écosystème Java

Langage de programmation orientée objet.

Famille C.

Vestiges du monde non-objet (méthodes statiques, etc.).

Histoire, origines.

== JVM

Un programme Java est une suite d'opérations spécifiées sous forme de *byte-code*.

Exécution *multiplateforme* du byte-code par la JVM.

JRE : environnement d'exécution minimal des programmes Java (les bases, collections etc...)

== JDK

Compilateur `javac` (`.java` vers `.class`).

Open JDK.

== IDE

Connaître toutes les étapes depuis le source Java jusqu'à l'exécution du programme.

Mais pour le développement de tous les jours, on utilise un IDE (environnement de développement intégré).

Eclipse, IntellilJ, NetBeans, ...

L'IDE propose souvent la notion de _projet_ et de _déploiement_.

== Le langage Java

Premier langage à fonctionner sur la JVM.

POO.

Les concepts forts de la POO dans Java :

- encapsulation,
- héritage,
- polymorphisme.

== Bases

=== Attention requise !

_Dans les exemples qui vont suivre, vous ne serez peut être pas à même de toujours comprendre tout le code. 
Ce n'est pas grave, le tout prendra sa cohérence au fur et à mesure_.

=== Typage

Toute donnée dans un programme java est vue par son *type*.

Le *type* permet de connaître l'ensemble complet :

- des valeurs possibles,
- des opérations possibles sur les instances ou valeurs de ce type.

Il existe deux sortes de types en Java :

- les types *valeur* (par exemple `int`),
- les types *objet* (par exemple `List<T>`).

Chaque type possède un *nom unique* qui permet de l'identifier sans ambiguité.

Les types sont rangés dans une arborescence de *packages* (`java.lang.String`, `fr.lteconsulting.Formation`,...).

On se réfère souvent au _nom simple_ d'un type pour le désigner. Son
nom complet s'appelle le *fully qualified name* (FQN). Il est composé du
nom du package et du nom dy type. Il est important car il élimine toute possibilité d'ambiguité.

Par exemple le _fqn_ du type `Utilisateur` dans le package `fr.lteconsulting.formations` est `fr.lteconsulting.formations.Utilisateur`.

=== Les types primitifs

Ce sont les types dont les valeurs sont stockées dans la machine sous forme de _nombres_.

L'ensemble des types primitifs est *prédéfini* et ne peut pas être modifié par un programme.

[cols="2*"]
|===
|Nom
|Description

|`boolean`
|`true` ou `false`, `false` par défaut

|`char`
|caractère encodé en UTF-16, 0 par défaut

|`byte`
|entier signé entre sur 8 bits, 0 par défaut

|`short`
|entier signé sur 16 bits, 0 par défaut

|`int`
|entier signé sur 32 bits, 0 par défaut

|`long`
|entier signé sur 64 bits, 0 par défaut

|`float`
|flottant sur 32 bits, 0 par défaut

|`double`
|flottant sur 64 bits, 0 par défaut

|`void`
|aucune valeur !
|===

NOTE: Attention, les types primitifs `float` et `double` sont codés en virgule flottante ! Il ne faut **surtout pas les utiliser** pour effectuer des traitements monétaires. Voici http://www.enseignement.polytechnique.fr/informatique/profs/Jean-Jacques.Levy/poly/main1/node7.html[quelques] http://pdp.microjoe.org/tutoriels/85/les-nombres-a-virgule-flottante/[liens] http://www.math.univ-paris13.fr/~delourme/Feuilles_TD_Projets_2013-2014/Chapitre1Japhet.pdf[explicatifs] et http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html[passionnants].

=== Les types objet

Types dont l'ensemble des valeurs sont des objets, dont la structure est définie par les programmes (classes, interfaces, énumérations, ...).

Un programme est généralement composé de multiples descriptions de nouveaux types objet (classes etc) qui viennent s'intégrer au système
de typage de Java.

Java fournit une version 'objet' pour chaque type primitif. On les appelle les types _boxés_. Par défaut, leur valeur est `null`.

`Boolean`, `Character`, `Byte`, `Short`, `Int`, `Long`, `Float`, `Double`, `Void`.

Le type`Void` ne possède que la valeur `null`.

Voici quelques types objet :

[cols="2*"]
|===
|Nom
|Description

|`java.lang.String`
|stocke une chaine de caractère

|`java.lang.Object`
|la classe mère de toutes les autres classes

|`java.util.List`
|stocke un liste à taille variable
|===

=== Types objet

- Classes
- Interface
- Enumérations
- Tableaux

=== Variable

Une variable est un emplacement mémoire avec *nom* et un *type*.

On peut lui associer une *valeur* ou une *référence* (selon le type de la variable).

Quand une variable est de type objet et qu'elle ne référence aucun objet, elle a la valeur spéciale `null`.

Pour être utilisable, une variable doit d'abord être *déclarée*.

Ensuite, elle peut être *lue* en mentionnant son nom ou *écrite* en utilisant l'opération `=` (*affectation*).

Attention, une variable n'est utilisable qu'après sa déclaration, et seulement au sein de sa portée (_scope_), 
c'est à dire dans le bloc englobant (que l'on identifie avec les accolades `{` et `}`).

Pour être lue, une variable doit d'abord avoir été *initialisée*, c'est-à-dire affectée au moins une fois.

[source,language=java]
----
int a; <1>
a = 4; <2>

char c = 'T'; <3>
----
<1> déclaration
<2> affectation
<3> les deux d'un coup !

[source,language=java]
----
----

=== Expression

Une expression est une composition de mot-clés, variables etc qui représente une valeur, qu'elle soit calculée ou pas.

Cette expression possède forcément un *type*.

[source,language=java]
----
// expression qui représente la valeur de la variable maVariable
maVariable

// expression qui représente la valeur de la variable maVariable
// à laquelle on ajoute 2
maVariable + 2

// autres expressions
(3 * x + 2 * y * y ) / z
x > 4
monCompte.getSolde() * banque.getTauxInteret() * utilisateur.getBonus()
----

=== Instruction

Une instruction spécifie une action à exécuter.

Il peut s'agir d'un appel de méthode, du `return`, `throw`, d'une instruction de contrôle (`if`, `switch`)...

=== Classes

Une classe décrit la structure et les opérations associées à toutes les instances de cette classe.

En Java, un objet est *toujours* associé à une classe qui le décrit.

Pour créer des nouveaux objets (afin de stocker ou traiter de l'information), on *instancie* la classe 
avec l'opérateur `new`.

Une classe java s'écrit dans un fichier nommé par le même nom (et même casse) auquel on donne l'extension `.java`.

Ce fichier .java sera (_le plus souvent_) situé dans un sous-répertoire du répertoire `src/` du projet, et qui correspondra au chemin jusqu'au _package_ de la classe.

NOTE: Il est néanmoins possible de déclarer plusieurs classes dans un même fichier *.java*. Nous reviendrons sur ces cas plus tard dans le cours (voir les classes imbriquées).


Définition d'une classe :

[source,language=java]
----
public class Produit { <1>
    private String nom; <2>

    public String getNom() { <3>
        return nom;
    }

    public void setNom(String nom) { <4>
        this.nom = nom;
    }
}
----
<1> Nom de la classe
<2> Un attribut
<3> Une méthode
<4> Une autre méthode

Instantiation :

[source,language=java]
----
Produit produit = new Produit();
----

=== Attributs

Un attribut est un emplacement mémoire réservé pour chaque objet (ou une fois pour toute la classe s'il est `static`).

De même qu'une variable, il possède un nom et un type. Par contre sa valeur est propre à chaque objet de la classe.

C'est ce qui permet à un objet d'avoir un *état*.

[source,language=java]
----
public class Personne {
    private String nom; <1>
    private String prenom;
}
----
<1> le modificateur `private` permet l'encapsulation en limitant l'accès à cet attribut au seul code de la classe `Personne`

=== Méthodes

Une méthode est une séquence d'instructions produisant une valeur, et possédant en entrée des *paramètres*.

Elle est déclarée par sa *signature* qui précise :

- son nom,
- son type de retour,
- ses paramètres formels.

La déclaration d'une méthode peut être préfixée par des 'modificateurs' (`public`, `private`, `static`, `final`) dont le sens est lié au concept des classes, étudié plus loin.

[source,language="java"]
----
int somme( int a, int b ) // signature de la méthode
{
	return a + b;
}
----

[source,language="java"]
----
int nombreAleatoire()
{
	// ...
}
----

Une méthode peut ne pas retourner de valeur, on utilise alors le mot clé 'void'

[source,language="java"]
----
void affiche( String texte )
{
	// ...
	// on peut utiliser le mot-clé 'return' pour arrêter l'exécution de la méthode.
}
----

=== Appel d'une méthode

Pour donner le flux de contrôle à une méthode et récupérer la valeur produite, on utilise l'appel de méthode.

On écrit simplement le nom de la méthode suivi de parenthèses contenant la valeur des paramètres.
L'expression ainsi écrite est évaluée à la valeur de retour de la méthode.

[source,language="java"]
----
// on appelle la méthode somme avec les paramètres 3 et 6
// a va valoir la valeur de retour de la méthode (9)
int a = somme( 3, 6 );
----

Lorsqu'on appelle une méthode, on donne une valeur à chacun des paramètres. 
L'exécution de la méthode se fait jusqu'à rencontrer l'instruction `return`. 
On obtient ainsi du côté du code _appelant_ la valeur de retour de l'appel de méthode.

=== Structures de controle

Instructions de branchement:: `if`, `switch`.

Instructions de bouclage:: `for`, `while`, `do ... while`.

=== Structure générale d'un traitement

On désire traiter des données en entrée, afin de produire des données en sortie.

Pour cela, on invente un algorithme qui répond au problème.

On découpe ce problème en petites parties réutilisables.

Chaque partie est codée sous forme de classe. Les parties sont reliées entre elles par des interfaces.

L'architecture est la vision de ce qui est important dans le programme.

Maintenir le programme est ce qu'il y a de plus difficile et c'est ce qui représente le plus grand temps consacré.





=== Tableaux

Une ou plusieurs dimension.

Indices démarrent de zéro.

Un tableau stocke la classe des éléments qu'il stocke. Il provoque une exception `java.lang.ArrayStoreException` si un objet du mauvais type est inséré dans le tableau.

Si on essaie d'accéder à une cellule du tableau qui n'existe pas (index négatif ou index trop grand), l'exception `IndexOutOfBoundsExeption` est levée.

==== Déclaration

[source,language="java"]
----
int[] tableauEntiers; <1>
String[] tableauString; <1>
----
<1> Les tableaux sont ici seulement déclarés, il ne sont pas encore _instanciés_ en mémoire. La variable `tableauEntiers` vaut `null` (de même pour `tableauString`).

==== Instantiation

On crée véritablement le tableau en mémoire avec l'instantiation qui s'écrit ainsi :

[source,language="java"]
----
tableauEntiers = new int[50]; <1>
----
<1> Nous demandons la réservation en mémoire d'un espace pouvant stocker 50 valeurs `int`.

==== Utilisation

[source,language="java"]
----
// lecture de la sixième cellule
int valeurCellule = tableauEntiers[5];

// écriture dans la première cellule
tableauEntiers[0] = -2;
----


=== La classe `String`

La classe `String` sert à représenter des chaînes de caractères (qui ont le plus souvent comme objectif d'être présentées à l'utilisateur, à un moment où un autre).

La https://docs.oracle.com/javase/7/docs/api/java/lang/String.html[Javadoc] de la class String est complète pour connaître les méthodes statiques et non statiques de cette classe. Voici néanmoins quelques méthodes de la classe `String` que vous utiliserez souvent :

[source,language=java]
----
String nom = "Toto";
String prenom = "Titi";

String nomComplet = nom + " " + prenom;
String enMajuscule = nomComplet.toUpperCase();
----

=== Classes de données

Une des utilisations les plus courantes des objets et de stocker une information simple et de donner accès à cette information.

On appelle ce rôle dans un programme les _classes de données_ ou *DTO* (_Data Transfer Object_) Aucun traitement n'est effectué dans ce genre d'objet.

Exemple :

[source,language=java]
----
public class Utilisateur {
    private String nom;
    private String prenom;

    public Utilisateur(String nom, String prenom) {
        this.nom = nom;
        this.prenom = prenom;
    }

    public String getNom() { return nom; }
    public void setNom(String nom) { this.nom = nom; }

    public String getPrenom() { return prenom; }
    public void setPrenom(String prenom) { this.prenom = prenom; }
}
----

=== Lien entre classes

On peut relier les classes et objets entre eux :

[source,language=java]
----
public class CompteEnBanque {
    private String identifiant;

    private Utilisateur proprietaire;

    public Utilisateur getProprietaire() {
        return proprietaire;
    }

    public Utilisateur setProprietaire(Utilisateur proprietaire) {
        this.proprietaire = proprietaire;
    }
}
----

=== Les génériques

La type générique (classe/interface/méthode) est un type dont l'implémentation est écrite sans connaitre 
à l'avance l'intégralité des types sur lesquels elle s'appuie.

Qu'est-ce qui peut être _générique_ en java ?

- les classes,
- les interfaces,
- les méthodes.

Paramètre de type:: Le nom que l'on donne au type(s) inconnu(s) au sein de l'implémentation d'un type générique.

Type argument:: Le type (réel) qui remplace le paramètre de type au moment de l'utilisation d'une classe/interface/méthode générique.

Contrainte:: Condition(s) que l'on impose au type argument d'un type générique.

=== Classes génériques

Voici un exemple de définition d'une classe générique `Tableau` travaillant sur un paramètre de type `T` :

[source,language="java"]
----
class Tableau<T> { <1>
	private T tableau; <2>
	
	Tableau( int taille ) {
		tableau = (T[]) new Object[taille]; <3>
	}
	
	T get( int index ) { <4>
		return tableau[index];
	}
	
	void set( int index, T valeur ) {
		tableau[index] = valeur;
	}
}
----
<1> Définition du paramètre de type `T`.
<2> L'attribut `tableau` est un tableau de `T`.
<3> Ce transtypage est obligatoire. On verra plus tard comment faire mieux.
<4> On retourne un élément de type `T`.

Voici un exemple de code utilisant la classe générique `Tableau` définie juste au dessus :

[source,language="java"]
----
Tableau<String> tableau;

// Syntaxe jusqu'à Java 6
tableau = new Tableau<String>();

// Syntaxe à partir de Java 7
tableau = new Tableau<>();

tableau.set( 4, "Une chaine de caractère" );
----

=== Les collections

NOTE: Le lecteur avide de précisions supplémentaires pourra lire ce http://www.jmdoudoux.fr/java/dej/chap-collections.htm[document] très complet de JM Doudoux.

Les classes de collection représentent des objets capables de gérer un ensemble d'objets.

Plusieurs familles de collections existent, avec une interface pour représenter chacune de ces familles. Chaque interface possède plusieurs implémentations répondant à des contraintes techniques variées. Toutes ces interface se retrouvent soit filles de l'interface `Collection` soit de `Map`.

En général une classe de collection permet au moins de stocker un ensemble d'objets, avec des méthodes pour ajouter d'autres objets, en retirer et parcourir les objets présents dans la collection.

Deux interfaces sont utilisées pour parcourir les collections : `Iterator` et `ListIterator`.

Une interface et une classe pour permettre le tri de certaines collections : `Comparable` et `Comparator`.

Deux classes comportant de nombreuses méthodes d'_outillage_ : `Arrays` et `Collections`.

Certaines de ces collections proposent des fonctionnalités comme la suppression des doublons ou encore la recherche d'éléments. Ces opérations s'appuient en général sur le concept d'égalité entre objets définie par les méthodes `equals(...)` et `hashCode()`. Il est donc d'autant plus important d'implémenter ces méthodes correctement lorqu'on les surcharge.

=== L'interface `Collection<E>`

Cette interface est l'interface de base pour `List<E>` et `Set<E>`. Voici quelques méthodes importantes :

`boolean add( E element )`:: Ajoute un élément à la collection

`boolean addAll( Collection<? extends E> collection )`:: Ajoute les éléments d'une collection dans une autre.

`void clear()`:: Vide la collection de tous ses éléments.

`boolean contains( Object o )`:: Teste la présence d'un élément particulier dans la collection. Les méthodes `equals` et `hashCode` sont utilisées pour rechercher l'élément dans la collection. On parle donc de la présence d'un objet _identique_ au sens _applicatif_.

`equals( Object other )` et `hashCode()`:: Ces méthodes sont redéfinies dans les collections pour refléter l'égalité de l'ensemble des éléments d'une collection.

`int size()`:: Retourne le nombre d'éléments dans la collection.

`boolean isEmpty()`:: Permet de savoir si une collection est vide. A utiliser de préférence au lieu de tester `if( collection.size() == 0 )`...

`Iterator<E> iterator()`:: Renvoie un `Iterator` permettant de parcourir la collection. Cette méthode est issue de l'interface `Iterable` qui est utilisée par la boucle `for( Element e : iterableObject )`.

=== `List<V>`, `ArrayList<V>`, `LinkedList<V>`

Un classe qui implémente l'interface `List<V>` représente un ensemble ordonné d'objets de type _V_. Le contrat de `List<V>` n'interdit pas les doublons.

`ArrayList<V>`:: Implémentation de l'interface `List<V>` grâce à un tableau redimensionnable. Non thread-safe. Autorise l'ajout d'élément `null`. La Javadoc est disponible https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[ici].

`LinkedList<V>`:: Implémentation de l'interface `List<V>` utilisant une liste (doublement) chaînée.

Voici quelques méthodes très utilisées de `List<V>` : `add( T element )`, `T get( int index )`, `ListIterator<T> listIterator()`, `T remove( int index )`, `T set( int index, T element )`, `List<T> subList( int indexFrom, int indexTo )` (attention ce n'est pas une copie !).

=== `Set<V>`, `HashSet<V>`, `TreeSet<V>`, `LinkedHashSet<V>`

Ensemble d'objet sans doublons. Ne permet pas l'accès direct à un élément de la collection (les éléments ne sont par ordonnés). Il existe une interface `SortedSet<V>` qui interdit les doublons et pour autant ordonne quand même les éléments.

=== `Map<K, V>`, `HashMap<K, V>`, `TreeMap<V>`, `LinkedTreeMap<V>`

Collection de couples d'objets _clé_, _valeur_. Une `Map<K, V>` permet d'associer des `V` à des `K`. Une fois l'association stockée dans l'objet _Map_, consulter l'objet de type `V` associé à une objet `K` est une opération qui sera réalisée avec une complexité algorithmique en _O(1)_.

Un objet de type `Map<K, V>` permet de lier un objet `V` avec une clé de type `K`. Il est ainsi possible d'obtenir un objet à partir de sa clé.

Quelques méthodes :

`V put( K key, V value )`:: Associe un objet à une clé.

`V get( Object key )`:: Retourne la valeur qui a été associée à la clé passée en paramètre, ou null s'il n'y en a pas.

`boolean containsKey( Object key )`:: Indique si un objet est associé à la clé `key` dans la table associative.

`boolean containsValue( Object value )`:: Indique si un objet `value` est stocké dans la table associative.

`V remove( Object key ), qui supprime la clé de cette table, et la valeur qui lui est associée.

`Set<Entry<K, V>> entrySet()`:: Retourne l'ensemble des couples clé-valeur (`Entry<K, V>`) contenues dans la table associative.

`Set<K> keySet()`:: Retourne l'ensemble des clés contenues dans la table associative.

`Collection<V> values()`:: Retourne l'ensemble des valeurs contenues dans la table associative.

=== Map, attention

*Attention !* les `Map` n'ordonnent pas les couples clé-valeur. Lors du parcours de ces entrées, l'ordre du parcours n'est pas garanti ni censé être le même à chaque fois ! Ceci est illustré par ce petit bout de code :

[source, language="java"]
----
import java.util.HashMap;

public class TestHashMapIterator {
	public static void main( String[] args ) {
		HashMap<String, String> map = new HashMap<String, String>( 34 );
		
		map.put( "1", "un" );
		map.put( "2", "deux" );
		map.put( "3", "trois" );
		map.put( "4", "quatre" );
		map.put( "5", "cinq" );
		
		for( String s : map.keySet() ) {
			System.out.print( s + " " );
		}
	}
}
----

Les performances des opérations `get()` et `put()` sont constantes sous réserve que la répartition des éléments dans les différents buckets grâce à leur valeur de hachage soit équitable (implémentation de la méthode `hashCode()` des éléments de la table associative).

=== `Queue<V>`, `LinkedList<V>`, `ArrayDequeue<V>`, `PriorityQueue<V>`

=== La classe `Collections`

Cette classe contient de nombreuses méthodes utilitaires statiques qui facilitent le travail avec les collections.

[source,language="java"]
----
Map<String, Piece> m = Collections.synchronizedMap( new HashMap<String, Piece>() );
----

=== `Iterator<T>`

L'interface `Iterator` permet un parcours très simple d'une collection. Trois méthodes sont fournies.

`boolean hasNext()`:: Renvoie `true` si au moins un élément de la collection n'a pas encore été parcouru.

`T next()`:: Retour l'élément suivant dans le parcours.

`void remove()`:: Retire l'élément tout juste parcouru de la collection.

Exemple d'utilisation:

[source,language="java"]
----
Iterator iterator = collection.iterator();
while( iterator.hasNext() ) {
	System.out.println( "objet = " + iterator.next() );
}
----

=== `ListIterator<T>`, `Comparable<T>`, `Comparator<T>`


=== Communication entre objets

*Un à un unidirectionnel*

C'est le cas le plus simple. Un objet doit avoir accès à un autre objet. Dans ce cas, il suffit de créer un attribut de type `B` dans la classe `A`. On décide ensuite s'il faut mettre un setter du côté `A` ou bien si l'objet `B` est reçu ou construit dans le constructeur de `A`.

*Un à un bidirectionnel*

Dans ce cas, chaque partie de la relation possède une référence vers l'autre partie. `A` a donc un attribut de type `B` et `B` a un attribut de type `A`. Reste à décider comment et dans quel ordre s'effectue l'initialisation.

*Un à plusieurs unidirectionnel*

Dans ce cas, un objet de type `A` possède une relation vers plusieurs objets du type `B`. Il suffit alors d'avoir une _collection_ de `B` du côté de `A`.

La collection peut être initialisée vide à la construction de `A` puis enrichie ensuite (lors de l'appel de méthodes destinées à cet effet).

*Un à plusieurs bidirectionnel*

`A` possède encore une collection de `B`. Par contre chaque objet `B` de la relation doit avoir une référence vers le `A` qui le contient.

NOTE: Il faut prendre garde au moment de l'ajout, retrait ou modification que les attributs sont bien à jour après opération.

*Plusieurs à plusieurs*

Cas le plus complexe. Exemple de `Article` et `Categorie`. Un article peut appartenir à plusieurs catégories et une catégorie peut être liée à plusieurs articles.



== Les exceptions

Mécanisme de gestion des erreurs en Java.

Le mécanisme des exceptions permet en cas d'erreur de dérouter le flot d'exécution normal d'un programme.

Le flot normal d'exécution consiste pour une méthode à exécuter les instructions les unes à la suite des autres jusqu'à rencontrer `return`. A ce moment l'éxécution de la méthode s'arrête et le flot d'exécution est redonné à l'**appelant**.

Une *exception* est une instance de la classe (ou sous-classe) `Exception`. Elle représente une *erreur* survenue pendant le déroulement du programme.

Trois mot-clés permettent de détecter et traiter ces erreurs : `try`, `catch` et `finally`.

Lorsqu'une erreur est provoquée, une exception est levée grâce au mot-clé `throw`.

Il est possible d'indiquer qu'une méthode peut potentiellement lever un type d'exception avec le mot-clé `throws`.

=== La hiérarchie des classes d'Exception

La classe mère de toutes les exceptions est la classe `Throwable`.

image::exceptions.png[]

`java.lang.Error`:: C'est sous cette classe que sont regroupées toutes les exceptions associées à des erreurs irrécupérables (par exemple: `OutOfMemoryError`, `StackOverflowError`, ...). Cette classe est réservée à Java, elle est d'ailleurs déclarée `final`, ce qui empêche d'en hériter.

`java.lang.Exception`:: Cette classe est la classe mère de toutes les exceptions _gérées_ (par exemple `FileNotFoundException`). C'est à dire que ces exceptions doivent être déclarées au niveau des signatures des méthodes pouvant les lever (avec le mot-clé `throws`, voir plus loin dans le cours).

`java.lang.RuntimeException`:: Cette classe est la classe mère des exceptions _non gérées_ (par exemple `NullPointerException`), c'est à dire qui peuvent être levées sans être déclarées au préalable dans la signature de la méthode (voir plus loin dans le cours).

=== La classe `Throwable`

La classe `Throwable` possède les caractéristiques suivantes :

- un constructeur par défaut `Throwable()`,
- un constructeur `Throwable( String message )` qui mémorise un message d'erreur,
- une méthode `String getMessage()` qui permet de retrouver le message passé par le constructeur (`null` sinon),
- une méthode `void printStackTrace()` qui écrit dans la sortie standard la pile d'exécution au moment de la levée de l'exception,
- une méthode `void printStackTrace( PrintStream stream )` qui fait la même chose mais dans le flux indiqué en paramètre.

La classe `Throwable` étant la classe mère de *toutes* les exceptions, toutes les exceptions bénéficient de ces fonctionnalités...

=== Détecter et traiter une exception (1/2)

Si vous exécutez ce code :

[source,language="java"]
----
public class TestException {
	public static void main( String[] args ) {
		int i = 3;
		int j = 0;
		
		System.out.println("résultat = " + (i / j));
	}
}
----

Vous provoquerez la levée de l'exception `ArithmeticException` :

----
Exception in thread "main" java.lang.ArithmeticException: by zero
	at tests.TestException.main(TestException.java:6)
----

Ce message signifie que l'exception `ArithmeticException` a été levée mais qu'elle n'a été _gérée_ par aucun code de votre programme. L'effet de ceci est donc l'arrêt complet du programme.

Il est possible de gérer les exceptions levées, de reprendre la main sur l'exécution du programme et ainsi de poursuivre les opérations, même après la levée d'une exception. Ceci se fait avec les mot-clés `try`, `catch` et `finally`.

=== Détecter et traiter une exception (2/2)

[source,language="java"]
----
try {
	// operation risquées;
} catch (ExceptionInteressante e) {
	// traitement de l'exception ExceptionInteressante
} catch (Exception e) {
	// traitement du cas d'exception général
} finally {
	// traitement exécuté dans tous les cas (exception levée ou pas)
}
----

Les instructions situées dans le bloc `try` sont _surveillées_ :

- Si aucune exception n'est levée pendant l'exécution du bloc `try`, l'exécution se poursuit avec le contenu du bloc `finally`.
- Si une exception est levée pendant l'exécution du bloc `try`, l'exécution de celui-ci s'arrête immédiatement et l'exécution se poursuit avec l'exécution du bloc `catch` correspondant le mieux au type de l'exception levée.

Dans tous les cas (exception levée ou pas), le bloc `finally` est exécuté après les autres (même si on fait `return` dans le bloc `try`).

=== Déclarer la potentielle levée d'une exception (1/2)

Lorsqu'une méthode peut lever une exception *gérée*, celle-ci doit être déclarée au niveau de la signature de la méthode. L'objectif est multiple : avoir une valeur documentaire, préciser au compilateur que cette méthode pourra lever cette exception et obliger à ce que toute méthode qui l'appelle devra prendre en compte cette exception (traitement ou propagation).

Par exemple, cette méthode doit déclarer `throws IOException` :

[source,language="java"]
----
public static String saisir( String message ) throws IOException <2>
{
	System.out.println( message );
	System.out.print( "> " );

	BufferedReader reader = new BufferedReader( new InputStreamReader( System.in ) );
	return reader.readLine(); <1>
}
----
<1> La méthode `readLine()` peut provoquer l'exception `IOException` qui est une sous-classe de `Exception` (et non de `RuntimeException`).
<2> Ceci oblige à préciser dans le prototype de `saisir(...)` que cette méthode peut lever `IOException`.

=== Déclarer la potentielle levée d'une exception (2/2)

Si l'exception potentiellement levée est gérée par la méthode, alors il n'est plus nécessaire de la déclarer avec `throws` :

[source,language="java"]
----
public static String saisie( String message )
{
	System.out.println( message );
	System.out.print( "> " );

	BufferedReader reader = new BufferedReader( new InputStreamReader( System.in ) );
	try <1>
	{
		return reader.readLine();
	}
	catch( IOException e ) <2>
	{
		e.printStackTrace(); <3>
		return null; <4>
	}
}
----
<1> On surveille l'exécution de la méthode `readLine()`...
<2> On définit le comportement à adopter si l'exception `IOException` est levée.
<3> On affiche la pile d'appel ayant provoqué l'exception.
<4> Mais on décide de retourner `null`...

=== Les exceptions personnalisées

Il est évidemment possible de définir des classes d'exception spécifiques à votre application. Celles-ci doivent être des sous-classes de `RuntimeException` (pour les exceptions non gérées) ou de `Exception`.

Exemple : 

[source,language="java"]
----
public class SaisieErroneeException extends Exception { <1>
	public SaisieErroneeException() {
	}

	public SaisieErroneeException( String s ) {
		super( s );
	}
}

public class TestSaisieErroneeException {
	public static void controle( String chaine ) throws SaisieErroneeException {
		if( "".equals( chaine ) == true )
			throw new SaisieErroneeException("Saisie erronee : chaine vide"); <2>
	}

	public static void main( String[] args ) {
		String chaine1 = "";

		try {
			controle( chaine1 );
		} catch ( SaisieErroneeException e ) { <3>
			System.out.println( "Saisie erronee: " + e.getMessage() );
		}
	}
}
----
<1> Nous sommes en train de définir une exception _gérée_.
<2> Le mot clé `throws` sert à lever une exception.
<3> Le `catch` ici permet le traitement spécifique de l'exception `SaisieErroneeException`. Toute autre classe d'exception ne sera pas _attrapée_.

=== Exercices

Vous pouvez utiliser cet http://perso.telecom-paristech.fr/~charon/coursJava/exercices/fact+Exc.html[exercice] pour vous familiariser avec la syntaxe des exceptions.







=== Enumération