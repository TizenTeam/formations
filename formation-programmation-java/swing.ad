= Programmation Java UI - Swing
:author: Arnaud Tournier - @ltearno - LTE Consulting - 2017 - Toulouse
:email: ltearno@gmail.com
:backend: revealjs
:imagesdir: images-java
:revealjs_theme: white
:revealjs_history: true
:source-highlighter: highlightjs
:revealjs_width: 1600
:revealjs_height: 1200
:revealjs_hideaddressbar: true
:revealjs_mousewheel: true
:revealjs_slidenumber: true
:revealjs_transitionspeed: zoom
:revealjs_fragments: true

== Arnaud Tournier

Email: ltearno@gmail.com

Twitter: https://twitter.com/ltearno[@ltearno]

Web: http://www.lteconsulting.fr[www.lteconsulting.fr]

**LTE Consulting** société de Développement, Conseil et Formation.

Speaker à Java One, Devoxx, GDG, JUG, GWTCon...

== Swing

Partie de la JRE qui permet de programmer des interfaces graphiques.

Fonctionne sur tous les OS supportant la JVM.

Successeur d'AWT avec lequel il est compatible.

=== Principe

L'interface graphique est découpée en parties _élémentaires_ et en panneaux.

L'application est un assemblage de ces éléments.

Il y a des _conteneurs_ et des _composants graphiques_.

Il y a toujours un conteneur de premier niveau qui représente la fenêtre de l'application.

=== Conteneur de premier niveau

- `JWindow` : une fenêtre minimale
- `JFrame` : une fenêtre standard
- `JApplet` : oubliez ça ne marche plus !

[source,language=java]
----
public static void main( String[] args )
{
    JFrame fenetre = new JFrame();
    fenetre.setBounds( 0, 0, 300, 300 );
    fenetre.setTitle( "Le titre" );
    
    fenetre.setVisible( true );
}
----

=== Fermeture du programme

Par défaut, fermer la fenêtre principale ne déclenche pas l'arrêt du programme.

[source,language=java]
----
fenetre.setDefaultCloseOperation( WindowConstants.EXIT_ON_CLOSE );
----

Il existe aussi `DO_NOTHING_ON_CLOSE` (par défaut), `HIDE_ON_CLOSE et `DISPOSE_ON_CLOSE`.

=== Composition d'une fenêtre

Une fenêtre est composée du plusieurs _calques_ dont un nous interresse particulièrement : le `ContentPanel`.

Ce panneau permet d'ajouter d'autres composants graphiques dans la fenêtre.

=== Ajout de composants dans une fenêtre

Il est rare d'ajouter directement des composants dans une fenêtre. 
En général les composants d'une application sont organisés en arborescence.

Le conteneur de composants graphique standard est la classe `JPanel`.

Ici nous ajoutons trois boutons dans la fenêtre. Mais en effet, ces trois boutons sont ajoutés dans un `JPanel`
qui lui-même est inséré dans la fenêtre.

[source,language=java]
----
public static void main( String[] args )
{
    JFrame fenetre = new JFrame();
    fenetre.setBounds( 0, 0, 300, 300 );
    fenetre.setTitle( "Le titre" );

    fenetre.setDefaultCloseOperation( WindowConstants.EXIT_ON_CLOSE );

    JButton boutonRouge = new JButton( "Pilule rouge" );
    JButton boutonBleu = new JButton( "Pilule bleue" );

    JPanel buttonsPanel = new JPanel();
    buttonsPanel.add( boutonRouge );
    buttonsPanel.add( boutonBleu );

    fenetre.getContentPane().add( buttonsPanel );

    fenetre.setVisible( true );
}
----

=== Gestion des événements

Quand l'utilisateur provoque un événement dans l'interface graphique, Swing se doit de prévenir 
votre programme. Ceci s'appelle la gestion d'événements.

Le principe est de fournir au composant graphique un _écouteur_ (un object implémentant une interface `Listener`). 
Quand un événement se produit, Swing appelle la méthode correspondante sur l'objet enregistré comme écouteur.

Un objet écouteur doit implémenter l'interface correspondant aux événements qu'il écoute. 
Par exemple `MouseMotionListener` pour écouter les événements de la souris.

[source,language=java]
----
public interface MouseListener extends EventListener {
    /**
     * Invoked when the mouse button has been clicked (pressed
     * and released) on a component.
     */
    public void mouseClicked(MouseEvent e);

    /**
     * Invoked when a mouse button has been pressed on a component.
     */
    public void mousePressed(MouseEvent e);

    ...
}
----

=== La classe `Event`

Les classes `ComponentEvent`, `InputEvent`, `MouseEvent` portent un information au sujet de l'événement :

- le bouton actif de la souris,
- la touche SHIFT est-elle appuyée ?
- quelle touche a été frappée ?

...

=== Les boutons et ActionListener

Un mécanisme similaire est en place pour les déclenchements des boutons.

[source,language=java]
----
JFrame fenetre = new JFrame();

// ...

JButton boutonRouge = new JButton( "Pilule rouge" );
boutonRouge.setActionCommand( "ROUGE" );

JButton boutonBleu = new JButton( "Pilule bleue" );
boutonBleu.setActionCommand( "BLEU" );

JPanel buttonsPanel = new JPanel();
buttonsPanel.add( boutonRouge );
buttonsPanel.add( boutonBleu );

ActionListener listener = new ActionListener()
{
    @Override
    public void actionPerformed( ActionEvent event )
    {
        String action = event.getActionCommand();
        switch( action )
        {
            case "ROUGE":
                System.out.println( "Bouton ROUGE cliqué" );
                break;

            case "BLEU":
                System.out.println( "Bouton BLEU cliqué" );
                break;

            default:
                System.out.println( "Bouton INCONNU !" );
                break;
        }
    }
};

boutonRouge.addActionListener( listener );

fenetre.getContentPane().add( buttonsPanel );

fenetre.setVisible( true );
----


=== Les conteneurs

Contiennent d'autres composants. Permettent l'assemblage.

`JContainer`

=== Les composants graphiques

Ne contient pas d'autre composant. Utilisé pour afficher de l'information ou permettre la saisie.

`JComponent`