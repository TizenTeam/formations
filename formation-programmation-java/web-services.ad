= Services Web avec JavaEE
:author: Arnaud Tournier
:email: ltearno@gmail.com
:backend: revealjs
:deckjs_theme: neon
:revealjs_theme: beige
:revealjs_history: true
:imagesdir: images-javaee
:source-highlighter: highlightjs

== Services Web

**Fournir** et/ou **accéder** à des **services** **distants** au travers des **technologies web standard**.

Permet de faire fonctionner des applications **hétérogènes**.

Réalise le concept de _RPC_ (Remote Procedure Call). Protocoles ouverts (pas RMI, DCOM, ...), représentations ouvertes (pas binaires, pas propriétaires).

Simplifie l'administration (protocoles standards, ports standards).

Riche écosystème (pile technique standard).

=== Définitions (1)

Fournir:: Un autre programme peut appeler les méthodes du notre.

Accéder:: Notre programme peut appeler les méthodes d'un autre.

Services:: Méthodes.

=== Définitions (2)

Distants:: Utilisation du réseau, les services sont sur des machines différentes.

Technologies standards:: Protocole HTTP, JSON ou XML pour la représentation des données.

Hétérogènes:: écrites dans des langages différents ou utilisant des technologies différentes.

== REST

L'architecture REST a pour objectif de faciliter et rationaliser la communication entre clients et serveurs.

Ce style d'architecture utilise le protocole HTTP pour supporter une partie de la sémantique des échanges.

C'est un style d'architecture. Pas une norme.

Voici quelques principes.

=== L'URL comme identifiant de resource

Exemples :

URL de la liste des livres

        http://lteconsulting.fr/livres

URL du livre 42

        http://lteconsulting.fr/livres/42

URL des commentaires sur le livre 53

        http://lteconsulting.fr/livres/53/commentaires

=== VERBE HTTP comme identifiant d'opération

|============
| **VERBE**  | **Signification**
| GET    | Lecture, consultation
| POST   | Création
| DELETE | Effacement
| PUT    | Mise à jour
|============

Ce sont les quatres opérations _CRUD_.

=== Exemple

Modification du livre 42

        PUT http://lteconsulting.fr/livres/42

Consultation du livre 42

        GET http://lteconsulting.fr/livres/42

Création d'un livre

        POST http://lteconsulting.fr/livres

Suppression du livre 42

        DELETE http://lteconsulting.fr/livres/42

=== Réponse HTTP comme représentation de la resource

La réponse HTTP contient une description de la resource demandée dans un format précis.

On utilise en général :

- JSON,
- XML,
- CSV,
- autre...

=== Rôle du serveur

La gestion, le stockage et les traitements des données sont de la responsabilité du serveur.

Le client a plutôt un rôle d'interface graphique (en général).

=== Sans état

Chaque requête contient toutes les informations nécessaires à son traitement.

**Aucune** requête ne doit dépendre d'un contexte conversationel.

=== Mise en cache

Dans les réponses HTTP, un header précise la possibilité de la mettre en cache et pendant combien de temps.

=== Réponse auto-descriptive

La réponse contient des informations sur elle-même.

Par exemple l'encodage utilisé par la réponse peut être indiqué dans la réponse elle-même.

=== RESTful Web Services

Ce sont des _services Web_ respectant l'architecture _REST_.

== Mise en oeuvre

De nombreux outils permettent la mise en oeuvre de l'architecture REST assez facilement :

- pour fournir les services web REST,
- pour consulter des services web REST.

Par exemple : `JAX-RS` est la norme JavaEE pour les services REST.

=== JAX-RS

Si on est dans un conteneur Java EE _full profile_, les composants REST sont déjà inclus.

Voici les étapes à suivre...

=== Etape 1

Dans `web.xml`, ajouter :

[source,language=xml]
----
<context-param>
    <param-name>resteasy.scan</param-name>
    <param-value>true</param-value>
</context-param>
<context-param>
    <param-name>resteasy.servlet.mapping.prefix</param-name>
    <param-value>/api</param-value>
</context-param>

<servlet>
    <servlet-name>Resteasy</servlet-name>
    <servlet-class>org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>Resteasy</servlet-name>
    <url-pattern>/api/*</url-pattern>
</servlet-mapping>

<listener>
    <listener-class>org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap</listener-class>
</listener>
----

Les services web de cette application auront toujours le préfixe d'url "/api/".

////
=== Etape 3

Configuration de l'application : pour activer `JAX-RS`, il faut créer une classe de configuration :

[source,language=java]
----
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("api")
public class MorpionRestApplication extends Application {
    // la classe est vide
}
----
////

=== Etape 2

Pour chaque service REST, implémenter une classe dont chaque méthode correspond à une URL du service.

Pour cela utiliser les annotations pour spécifier à `JAX-RS` le verbe et les paramètres HTTP liés à chaque méthode (`@Path`,`@GET`,`@POST`,`@Consumes`,`@Produces`,`@PathParam`, ...).

=== Exemple

[source,language=java]
----
@Path( "pop" )
public class ContactsWebService {
    @GET
	@Produces( MediaType.APPLICATION_JSON )
	public List<Contact> getAll() { return ...; }

	@GET
	@Path( "{id}" )
	@Produces( MediaType.APPLICATION_JSON )
	public Contact getOne( @PathParam( "id" ) int id ) { return ...; }

	@PUT
	@Consumes( MediaType.APPLICATION_JSON )
	@Produces( MediaType.APPLICATION_JSON )
	public Contact create( FunkoPop pop ) { return ...; }

	@Path( "search" )
	@GET
	@Produces( MediaType.APPLICATION_JSON )
	public List<Contact> search( @QueryParam( "name" ) String name ) { return ...; }
}
----

=== Exemple

Avec la classe précédente, le client pourra accéder aux urls :

- `.../api/pop` en GET pour obtenir tous les Contacts,
- `.../api/pop/34` en GET pour obtenir le Contact id:34,
- `.../api/pop` en PUT avec un Contact sérialisé en JSON pour créer un Contact,
- `.../api/pop/search?name=Toto` en GET pour obtenir les Contacts avec un nom donné.

_Remarque: on peut injecter des EJB dans les WebServices_.

=== Consommer un service web REST depuis une application Java EE

- Décrire le service que l'on veut appeler dans une interface Java.
- Demander à `JAX-RS` de créer un _proxy_ d'appel vers le Web Service en précisant :
-- l'URL de base,
-- l'interface qui représente ce service.

Documentation https://docs.jboss.org/resteasy/docs/3.0-beta-3/userguide/html/RESTEasy_Client_Framework.html[ici]

=== Dépendances Maven

Pour un serveur Wildfly 10, on ajoute :

[source]
----
<dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-client</artifactId>
</dependency>
----

=== Création de l'interface de service

[source,language=java]
----
@Path( "/marvels" )
public interface MarvelService
{
	@GET
	@Produces( MediaType.APPLICATION_JSON )
	List<Contact> getAll();

	@GET
	@Path( "{id}" )
	@Produces( MediaType.APPLICATION_JSON )
	Contact getOne( @PathParam( "id" ) int id );

	@PUT
	@Consumes( MediaType.APPLICATION_JSON )
	@Produces( MediaType.APPLICATION_JSON )
	Contact create( FunkoPop pop );

	@Path( "search" )
	@GET
	@Produces( MediaType.APPLICATION_JSON )
	List<Contact> search( @QueryParam( "name" ) String name );
}
----

=== Création du client REST

http://services.groupkt.com/country/get/all

[source]
----
ResteasyClient client = new ResteasyClientBuilder().build();
ResteasyWebTarget target = client.target( "http://toto.com/marvels" );

MarvelService service = target.proxy( MarvelService.class );
List<Contact> contacts = service.getAll();

// si tout s'est bien passé,
// contacts contient une liste de Contacts
----