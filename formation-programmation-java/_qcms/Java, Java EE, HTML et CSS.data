1. Qu’est-ce qu’un design pattern ?
-Un segment de code réutilisable
-Une solution à un problème de conception
-Une solution à un problème algorithmique

2. Qui a popularisé les design patterns ?
-Les Three Amigos
-La Band of Five
-Le Gang of Four
-Brendan Eich

3. Quel(s) principe(s) de la POO favorisent les patterns ?
-Principe ouvert / fermé
-Couplage faible
-Programmer avec des interfaces

4. Quel est le principe d’un ORM ?
-Faire un lien entre une classe java et une page html
-Faire un lien entre une classe java et une table d’une bdd
-Faire un lien entre une classe java et une servlet
-Faire un lien entre une classe java et un DAO

5. Avec JPA, laquelle de ces méthodes permet de mettre à jour une entité déjà existante en base ?
-em.persist(entite)
-em.merge(entite)
-em.update(entite)

6. Si j’ai une classe User, laquelle de ces requêtes JPQL n’est pas valide pour récupérer tous les utilisateurs ?
-`FROM User`
-`FROM user`

7. Lorsque l'on veut passer des informations depuis une servlet à une JSP, on utiliser ?
-`request.setAttribute( "nom", valeur )`
-`request.setParameter( "nom", valeur )`
-`request.setData( "nom", valeur )`

8. Avec JPA, quelles sont les annotations obligatoires pour mapper une entité ?
-`@Entity`, `@Id`, `@Table`
-`@Entity`, `@Id`
-`@Id`, `@GenerationValue`
-`@Entity`, `@Table`, `@Column`

9. Avec JSF, quelle annotation doit posséder une classe java pour être accessible dans la vue ?
-`@ManagedBean`
-`@JsfBean`
-`@ActionBean`
-`@Aucune de celles-ci`

10. Avec JPA, quelle annotation permet d’injecter l’EntityManager dans une classe ?
-`@EntityManager`
-`@Persistence`
-`@JpaManager`
-`@PersistenceContext`

11. Quelle annotation faut-il ajouter à un `ManagedBean` pour le faire persister le temps d’une session ?
-`@Session`
-`@Stateful`
-`@SessionScoped`
-`@ManagedSession`

12. Quelle méthode de l’`EntityManager` permet d’obtenir une entité par son ID?
-`find(Entite.class, id)`
-`get(Entite.class, id)`
-`getById(Entite.class, id)`
-`getWithId(Entite.class, id)`

13. Si une méthode public de `ManagedBean` renvoie une `String` et est utilisée comme action dans un formulaire, à quoi sert la `String` retour ?
-A rediriger vers l’adresse retournée
-A afficher le message retourné
-A rediriger vers un forward défini en XML
-A rien, les méthodes void sont préférées

14. Dans un ORM, si l’on ne veut pas récupérer d’un coup l’intégralité des classes se trouvant en attribut d’une autre classe, quel type de fetch faut-il ?
-eager
-lazy
-partial
-none

15. Laquelle de ces requêtes SQL permet d’obtenir toutes les personnes dont le nom est "phil" ?
-`SELECT * FROM personne WHERE nom = 'phil'`
-`SELECT * FROM personne`

16. Comment peut-on valider un formulaire en JSF ?
-Avec une classe implémentant l’interface `Validator` et possédant l’annotation `@FacesValidator`
-Avec une méthode de `ManagedBean` acceptant en argument le `FacesContext`, `UIComponent` et `Object`
-Directement dans la vue, via des balises de validation placées dans l’input à valider

17. Qu'est-ce qu'Hibernate ?
-Hibernate est un framework de mapping objet/relationnel.
-Hibernate est un framework utilisé coté web.

18. Comment définir le dialecte de la base de données dans un fichier de configuration ?
-`<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" />`
-`<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />`

19. Qu'est-ce qu'un objet persistant ?
-Un objet persistant est un objet qui a une existence dans la base de données et qui est référencé par un ID
-Un objet qui sert à l'accès à la base de données

20. Comment exécuter du code JPQL ?
-`Query query = em.createQuery("Requête JPQL");`
-`Query query = em.createCriteria("Requête JPQL");`
-`Query query = em.createSQLQuery("Requête JPQL");`

21. Qu’est-ce que JPA ?
-C'est une implémentation de persistance à la base de données
-C'est une API java de persistance
-C'est un contrôleur qui traite les requêtes pour renvoyer des réponses

22. Avec quelle annotation indique-t-on que la classe est persistante ?
-`@Table`
-`@Entity`
-`@Column`

23. Avec l'utilisation de JPA, quelle est l'interface à utiliser pour accéder à la base de données ?
-`SessionFactory`
-`EntityManager`
-`EntityTransaction`

24. Quelle est la différence entre entityManager.persist(..) et entityManager.merge (...) ?
-Il n’y a aucune différence entre les deux
-`persist` pour l'insertion et `merge` pour la mise à jour
-`persist` pour l'insertion et `merge` peut jouer le rôle d'insertion et de mise à jour

25. Quel est l'attribut à utiliser en JPA pour pouvoir charger une liste lors de la demande?
-`fetch = FetchType.LAZY`
-`fetch = FetchType.EAGER`

26. Par qui java a-t-il été développé ?
-Google
-Oracle
-Microsoft

27. Que peut-on mettre dans une interface ?
-Des définitions de variables et des méthodes abstraites
-Au moins une méthode abstraite
-Des prototypes de méthodes et des constantes
-Des prototypes de méthodes

28. Qu’affichera le code suivant ?

	public class UneClasse {
		private String attribut = "un mot"?
		public UneClasse() {
			this.attribut = "un autre mot";
		}
	}

	public class AutreClasse extends UneClasse {
		public String getAttribut() {
			return this.attribut;
		}
	}

	public static void main(String[] args) {
		UneClasse instance = new AutreClasse();
		System.out.println( instance.getAttribut() );
	}
-Un mot
-Un autre mot
-Une erreur car `AutreClasse` n’a pas accès à attribut
-Une erreur car `AutreClasse` n’est pas du type `UneClasse`

29. Quelle phrase est vraie ?
-Une classe peut étendre plusieurs classes mais ne peut implémenter qu’une interface
-Une classe ne peut étendre qu’une seule classe mais implémenter plusieurs interfaces
-Une classe peut étendre plusieurs classes et implémenter plusieurs interfaces
-Une classe ne peut étendre qu’une seule classe et n’implémenter qu’une seule interface

30. Qu’est-ce que l’encapsulation ?
-Le fait de mettre une visibilité publique seulement aux variables auxquelles on veut permettre l’accès
-Le fait d’avoir une classe ou une liste de classes en attribut d’une autre classe
-Le fait de ne donner accès aux informations d’un objet qu’en passant par des méthodes dédiées
-Le fait d’appeler des attributs d’une classe mère depuis l’une de ses classes filles

31. Quelle phrase est vraie ?
-La classe abstraite peut implémenter des méthodes contrairement à l’interface
-La classe abstraite ne peut pas définir de constante contrairement à l’interface
-La classe abstraite peut être instanciée contrairement à l’interface
-Il n’y a pas de différence entre ces deux classes

32. En SQL, quelle requête permet d’effectuer une jointure entre premiere_table et seconde_table en affichant toutes les entrées de seconde_table ?
-`SELECT * FROM premiere_table pt INNER JOIN seconde_table st ON pt.id_prem=st.id_prem;`
-`SELECT * FROM premiere_table pt LEFT OUTER JOIN seconde_table st ON pt.id_prem=st.id_prem;`
-`SELECT * FROM premiere_table pt RIGHT JOIN seconde_table st ON pt.id_prem=st.id_prem;`
-`SELECT * FROM premiere_table pt UNION seconde_table st ON pt.id_prem=st.id_prem;`

33. Qu’est-ce qu’un DAO ?
-Une classe qui centralisera les requêtes vers la base de données pour une entité
-Une classe de JDBC permettant la communication avec la base de données
-Une classe qui ne peut être instanciée qu’une seule fois
-Une classe qui fera le lien entre les différentes entités

34. Si `ClasseB` hérite de `ClasseA` qui implémente `InterfaceA`, lequel de ces codes est possible ?
-`ClasseB classe = new ClasseA();`
-`ClasseA classe = new InterfaceA();`
-`ClasseB classe = new InterfaceA();`
-`InterfaceA classe = new ClasseB();`

35. Quel code n’est pas correct pour instancier une classe ?
-`ClasseA classe = new ClasseA();`
-`ClasseA classe = Class.forName("fr.machin.ClasseA").getInstance();`
-`ClasseA classe = instanciate(ClasseA);`
-`ClasseA classe = ClasseA.class.newInstance();`

36. Quelle est l’erreur de cette boucle for ?

	for( x = 10; x == 0; x++ ) {
		x­­;
	}
-On ne peut pas modifier `x` dans le corps de la boucle
-Il faut donner un type à `x`
-Une boucle for doit aller en s’incrémentant uniquement
-`x` ne sera jamais égal à 0

37. Quelle ligne est correcte pour récupérer une connexion via JDBC ?
-`DriverManager.getConnection("jdbc:mysql:127.0.0.1/nom_bdd", "username", "password");`
-`DriverManager.getConnection("jdbc:mysql://127.0.0.1", "nom_bdd", "username", "password");`
-`DriverManager.getConnection("jdbc:mysql:127.0.0.1", "nom_bdd", "username", "password");`
-`DriverManager.getConnection("jdbc:mysql://127.0.0.1/nom_bdd", "username", "password");`

38. Quelle est la bonne syntaxe pour effectuer une boucle 'for' sur une `List<Personne> laListe` en java ?
-`foreach(Personne personne : laListe) { }`
-`for(Personne personne in laListe) { }`
-`for(Personne personne : laListe) { }`
-`foreach(Personne personne in laListe) { }`

39. Pour

	int variable = 9

que vaut

	(10 >= variable && variable != 9) || (variable > 9 || variable < 9)
-`true`
-`false`
-9
-Erreur, il manque le `if`

40. Comment faire référence à une classe parente dans une classe enfant ?
-`parent`
-`herited`
-`this`
-`super`

41. Qu’est-ce que la refactorisation ?
-Le fait de rendre le code automatique
-La revue du code pour simplifier sa maintenabilité et éviter les répétitions
-La revue du code pour voir si toutes les exigences attendues sont présentes
-L’ajout de fonctionnalités supplémentaires à un code

42. Si une méthode qu’on utilise lève une exception, on pourra se passer du `try..catch` en choisissant de faire que notre méthode throw l’exception en question.
-Vrai
-Faux

43. Que peut contenir une JSP ?
-Du code Java et du HTML
-Du code Java et du XML
-Du code Java et du Javascript

44. La Jsp doit être compilée par le serveur.
-Vrai, ne sera ensuite affiché que du HTML
-Faux, elle est compilée par le client
-Faux, elle n’est pas compilée

45. Dans une JSP, lequel de ces codes ne permet pas d’afficher une variable `laVar` ?
-`<%= laVar %>`
-`${ laVar }`
-`<% laVar %>`

46. Comment appelle-t-on le `${ }` ?
-`Expression Tag`
-`Expression Language`
-`Markup Language`
-`Interpreted Language`

47. Qu’est-ce qu’un Taglib ?
-Une librairie JSTL
-Des balises liées à des classes Java par un schéma XML
-Des balises appelant des JSP
-Des balises HTML spéciales pour Java

48. En considérant les préfixes `c` pour le `core` et `fmt` pour le `format`, quelle est la syntaxe pour faire une boucle avec JSTL ?
-`<c:forEach items="truc" var="machin"></c:forEach>` où `items` est la variable interne à la boucle et `var` la liste
-`<fmt:forEach items="truc" var="machin"></fmt:forEach>` où `items` est la variable interne à la boucle et `var` la liste
-`<c:forEach items="truc" var="machin"></c:forEach>` où `items` est la liste et `var` la variable interne à la boucle
-`<fmt:forEach items="truc" var="machin"></fmt:forEach>` où `items` est la liste et `var` la variable interne à la boucle

49. De quelle classe doit hériter une servlet ?
-`HttpRequest`
-`Servlet`
-`HttpServlet`
-`RequestServlet`

50. Quelle méthode sera appelée sur la servlet lors de l’accès à son URL sur un navigateur (en utilisant la barre d'adresse pour lancer la requête) ?
-`doPost()`
-`forward()`
-`doGet()`
-`processRequest()`

51. Dans une servlet, quelle méthode permet de faire une redirection ?
-`response.redirect("url/de/redirection");`
-`request.getRequestDispatcher("url/de/redirection").forward(request, response);`
-`response.sendRedirect("url/de/redirection");`
-`request.forward("url/de/redirection");`

52. Que permet le design pattern MVC ?
-L’interaction entre du code java et du code html
-La séparation des couches présentation, gestion des requêtes et modèle de données
-L’appel de JSP au sein de Servlet

53. Comment stocker une valeur qui pourra être accédée entre plusieurs JSP et Servlet après plusieurs requêtes ?
-`request.setAttribute("clef", valeur);`
-`request.getSession().setParameter("clef", valeur);`
-`request.setParameter("clef", valeur);`
-`request.getSession().setAttribute("clef", valeur);`

54. Quelle est l’erreur dans le code HTML suivant ?

	<p class="laClasse">
		<span class="laClasse">test</span>
		<img alt="une image" title="une image" src="url/image.jpg" />
	</p>
-La balise `img` n’est pas fermée
-En HTML il faut toujours utiliser des simple quotes pour les attributs
-Une classe ne peut être assignée qu’à une seule balise
-Il n’y a pas d’erreur

55. Quelle est la version actuelle des Ejb ?
-1
-2
-3
-4

56. Comment instancier un Ejb ?
-Via la méthode lookup()
-Via l’annotation @EJB
-Via un new Ejb()
-L’instanciation des Ejb est gérée par le conteneur

57. En EJB, quelle annotation faut-il sur une interface pour qu’elle soit accessible sur un serveur distant ?
-`@Local`
-`@EJB`
-`@Stateless`
-`@Remote`

58. Quelle annotation permet de conserver l’état d’un Ejb entre deux appels d’un même utilisateur ?
-`@Stateless`
-`@Stateful`
-`@Session`
-`@Persist`

59. Un projet Ejb peut être déployé sur n’importe quel type de serveur.
-Vrai
-Faux

60. Quelles sont deux des librairies de composants JSF majeures ?
-JavaServerFaces et LimeFaces
-AngularJs et jQuery
-RichFaces et PrimeFaces
-PrimeJsf et LimeFaces

61. Le rôle d’un diagramme de classes UML est :
-Modéliser un workflow dans un use case ou entre plusieurs use cases
-Décrire la logique d’une méthode dans une classe
-Identifier les éléments du domaine et définir les relations et les interactions entre ces éléments

62. Un diagramme de séquence :
-Permet de décrire les enchaînements possibles entre les scénarios préalablement identifiés
-Est une représentation séquentielle du déroulement des traitements et des interactions entre les éléments du système et/ou de ses acteurs
-Est une représentation simplifiée d’un enchaînement de séquences  se concentrant sur les échanges de messages entre les objets

63. Quel terme ne se rapporte pas à la modélisation d’un diagramme UML ?
-EJB
-Interface
-Objet

64. Dans un diagramme de classes en langage UML, la généralisation :
-Est une relation transitive : si C dérive d’une classe B qui dérive elle-même d’une classe A, alors C dérive également de A
-Est une relation réflexive : une classe peut dériver d’elle-même
-Est une relation symétrique : si une classe B dérive d’une classe A, alors la classe A peut dériver de la classe B
-Représente une association non symétrique dans laquelle une des extrémités joue un rôle prédominant par rapport à l’autre extrémité

65. Qu’est-ce que le lien `include` ?
-Une relation entre deux instances de cas d’utilisation telle que la réalisation de l’un nécessite celle de l’autre
-Une relation entre deux instances de cas d’utilisation telle que l’une ne peut être complétée que par le comportement de l’autre

66. Que signifie UML ?
-Unified Methods Logic
-Unique Model Logic
-Unified Modeling Language
-Unique Method Language

67. Comment représente-t-on la visibilité protected dans un diagramme de classe en UML ?
-`+`
-`~`
-`#`

68. Comment représenter une association unidirectionnelle ?
-Une flèche vers la classe possédée
-Une flèche vers la classe possédante

69. Quel diagramme préfèrera-t-on pour représenter les communications entre classes pour un scénario ?
-Diagramme de classe
-Diagramme d’activité
-Diagramme d’objet
-Diagramme de séquence

70. Quel port est utilisé par défaut par le protocole HTTP ?
-88
-6060
-225
-80

73. Pour transformer un code lisible en code compréhensible par la machine, on utilise :
-Un compilateur
-Un exécuteur
-Un transformateur
-Un traducteur

74. Lequel n'a pas sa place parmi ces choix :
-instanceof
-select
-for

75. Laquelle de ces lignes provoque une erreur ?
-`x + 4`
-`3 * (Y - 2) + 1 % 1`
-`(27 + 2 / 3) <= 3 - 1`
-`(2 == x - 7 * 3) + 1`

76. Toute instruction if peut s'écrire comme une instruction switch équivalente :
-Vrai
-Faux

77. Que va produire ce code :   `for( ; ; ) {}`
-Une erreur de compilation
-Une erreur d'exécution
-Une boucle infinie
-Rien du tout, c'est comme-ci on n'avait rien mis

78. Que ne fait pas cette instruction Java ? `Date today = new Date();`
-Déclaration d'une nouvelle variable
-Création d'un objet
-Invocation d'une méthode
-Opération d'affectation

79. Que va provoquer l'exécution de ce morceau de code ?

	int longueur = "Mercedes ML".length();
-Une erreur de compilation
-Une erreur d'exécution
-Une affectation de la longueur de la chaine dans la variable longueur
-Rien du tout

80. Comment peut-on connaitre les paramètres à fournir pour créer un nouvel objet ? En consultant ...
-Les constructeurs
-Les méthodes
-Les packages
-Les librairies

81. Que va afficher cette instruction à la console ?

	System.out.println (4 + 5 + " enfants");
-45 enfants
-9 enfants
-0
-0 enfants

82. Qu'est-ce-qu'une classe par rapport à un objet
-Un objet est une instance d'une classe
-Une classe est une instance d'un objet
-Il n'y a aucun lien entre classe et objet

83. Les attributs d'une classe d'objet sont représentés par :
-Des variables locales
-Des variables d'instance
-Des méthodes
-Une entité distincte appelée corps de classe

84. Cette déclaration est faite dans une classe Person. Où cette variable ne sera-t'elle pas visible ?

	private int age;
-Dans les méthodes de la classe `Person`
-Dans le corps de la classe `Person`
-Dans le code qui utilise un objet de la classe `Person`
-Nulle part, elle sera visible partout

85. Que manque-t'il pour que cette déclaration de méthode compile ?

	public somme ( int a, int b )
	{
		return a + b;
	}
-Rien du tout, c'est correct
-Il manque le type de retour
-On ne peut pas renvoyer directement a+b, il faut créer une variable locale, y placer le résultat de a+b puis la renvoyer
-Il manque le modificateur private

86. Lorsque plusieurs méthodes ont le même nom (surcharge), comment la machine virtuelle Java sait-elle laquelle on veut invoquer ?
-Elle les essaie toute une à une et prend la première qui fonctionne
-Elle ne devine pas, il faut lui spécifier lorsqu'on compile le code
-On indique le numéro de la méthode que l'on veut invoquer
-Elle se base sur les types des paramètres

87. Quelle instruction faut il utiliser pour créer un nouveau tableau d'entiers de type int de 5 cases ?
-`Array t = new Array ("int", 5);`
-`int t = new int[5];`
-`int[] t = new int[5];`
-`int[] t = new int[4];`

88. Soit la classe `ChessPiece` qui représente une pièce d'un jeu d'échec et la classe `Pawn` qui représente un pion. La classe `Pawn` hérite de la classe `ChessPiece`.

Quel type d'objet ne pourrais-je pas mettre dans le tableau suivant ?

	Object[] tt = new ChessPiece[2];
-un objet de type `Object`
-un objet de type `ChessPiece`
-un objet de type `Pawn`

89. Comment fait-on pour créer une liste dynamique de type ArrayList de taille 3 ?
-`ArrayList list = new ArrayList (3);`
-`ArrayList[] list = new ArrayList[3];`
-`ArrayList list = new ArrayList<3>();`
-On ne peut pas spécifier la taille de la liste lors de sa création

90. Pour empêcher une classe d'être étendue, quel est le mot réservé que l'on utilise dans la déclaration de classe ?

	public XXX class MaClasse
	{
	}
-`transient`
-`final`
-`abstract`
-`native`

91. Complétez la classe suivante qui définit une nouvelle exception avec le moins d'instructions possible

	public class MyException extends Exception
	{
		// À compléter
	}
-`public MyException() { super(); }`
-`public MyException() { super ("MyException"); }`
-`public MyException (String msg) { super (msg); }`
-On peut ne rien mettre du tout

92. Quelle phrase au sujet de Java est correcte ?
-En Java, les types primitifs ne sont pas des objets
-Java supporte l'héritage multiple entre les classes
-En Java, on peut affecter soi-même l'adresse d'un pointeur
-Java supporte la surcharge des opérateurs

93. Que signifie le mot clef "static" associé à un attribut ?
-Que la valeur de cet attribut est constante
-Que cet attribut n'est visible que dans la classe où il est défini
-Que cet attribut sera toujours passé par valeur
-Que cet attribut a une valeur unique pour toutes les instances de la classe

94. Au sujet du mot clef "abstract", quelle assertion est fausse ?
-Une classe abstraite ne peut être instanciée
-Une méthode abstraite n'a pas d'implémentation
-Une classe abstraite n'a pas forcément de classe fille
-Une classe abstraite doit contenir au moins une méthode abstraite

95. `Child` est une classe héritant de la classe `Parent`. `myChild` et `myParent` sont des instances respectivement de `Child` et `Parent`. 
Quel code ne compile pas ?
-`Parent p = new Child();`
-`myParent = myChild;`
-`myChild = myParent;`
-`myChild = (MyChild)myParent;`

96. Une interface en Java peut contenir :
-Des déclarations de méthodes et des constantes
-Des déclarations de méthodes et de méthodes statiques
-Des décalarations de méthodes et de constructeurs

97. Quelle différence existe t-il entre les interfaces `List` et `Set` ?
-Une `List` peut contenir une référence null, pas un `Set`
-Un `Set` peut contenir deux fois le même élément, pas une `List`
-Une `List` peut contenir deux fois le même élément, pas un `Set`

98. Si la classe `B` hérite de `A` qui implémente l'interface `K`, je peux écrire :
-`B i = (K) new A ( );`
-`A i = new K( );`
-`B i = new A ( );`
-`K i = new B ( );`

99. Laquelle de ces affirmations sur les constructeurs est vraie ?
-Les constructeurs ne doivent pas avoir des arguments si la classe mère n'a pas de constructeur avec des arguments
-Les constructeurs ne sont pas hérités
-Les constructeurs ne peuvent pas être surchargés
-La première déclaration de chaque constructeur est un appel égal à super() ou this()

100. La déclaration suivante : 

	public class MaClass<T>
	{
		// ...
	}

permet de définir...
-Rien du tout en java
-Un type générique
-Une classe abstraite dont la classe `T` hérite forcément
-Un type comparable avec le type `T`

101. Dans quelle situation utilise t-on la séquence : try-catch-finally ?
-Pour traiter les exceptions
-Pour sortir du programme
-Pour déboguer le code

102. Peut-on utiliser plusieurs blocs `catch` après un bloc `try` ?
-oui
-non

