= Travaux Pratiques - Réseau
:author: Arnaud Tournier
:email: ltearno@gmail.com
:toc: macro
:toc-title: Exercices de programmation avec Java EE
:source-highlighter: highlightjs
:imagesdir: images-javaee

LTE Consulting (C) - 2016

toc::[]

== Exercice 1 - Connectons-nous

Dans un premier exercice, l'objectif est d'arriver à connecter deux programmes entre eux par l'intermédiaire du réseau.

La portée de l'exercice est essentiellement pédagogique et permettra d'avoir une bonne représentation mentale des mécanismes impliqués lorsque nous créerons des applications web.

=== Introduction

Les sockets servent à faire communiquer deux hôtes appelés **Client** et **Serveur** à l'aide d'une adresse IP et d'un port de communication TCP.

Ces sockets permettront de gérer des flux entrant et sortant afin d'assurer une communication entre les deux (le client et le serveur).

Nous écrirons notre programme en Java, mais il faut savoir que le mécanisme des sockets est fourni par le système d'exploitation, et que donc tout programme (indépendamment du langage utilisé pour l'écrire) peut utiliser les sockets au même titre que le nôtre.

De façon concrète, la communication entre deux hôtes nécessite plusieurs étapes préliminaires que l'on appelle **établissement de la connexion** :

- le programme appelé "serveur" ouvre et commence à écouter les demandes de connexion sur un port donné
- le programme appelé "client" demande à établir une connexion vers le port du serveur. A cette fin il doit préciser l'adresse de la machine sur laquelle est exécutée l'application "serveur" ainsi que le numéro de port que celle-ci a ouvert.
- le système d'exploitation s'occupe d'établir la connexion, et si celle-ci est réussie, la communication entre les deux programmes peut commencer.

=== Ecriture du programme "Serveur"

Commmencez par créer un nouveau projet, que vous appelerez "Serveur".

Créez une classe "Serveur" dans le package de votre choix, déclarez une méthode 'main()'.

Le serveur doit donc commencer par ouvrir un port sur la machine locale.

Pour demander l'ouverture d'une socket côté serveur, on utilise la classe `SocketServer`:

[code,language='java']
----
// ici on demande l'ouverture du port 9090 mais on peut choisir n'importe lequel
ServerSocket socketserver = new ServerSocket(9090);
----

Après l'ouverture du port demandé, le serveur doit maintenant attendre que des connexions soient demandées par les programmes clients.

La méthode `accept()` de la classe `ServerSocket` permet ceci. L'appel à cette méthode bloque jusqu'à ce qu'un client demande la connexion. A ce moment, la méthode retourne une instance de la classe `Socket` qui représente la connexion avec le client (et non plus le port ouvert, réprésenté par `socketServer`).

[code,language='java']
----
Socket communicationAvecClient = socketServer.accept();
----

Si aucune exception n'est levée et que la variable `communicationAvecClient` est non nulle, cela signifie que la connexion s'est correctement effectuée, nous sommes prêts à échanger des données entre le client et le serveur!

Dans le cas contraire, c'est qu'une erreur s'est produite, zut!

Pour fermer la connexion avec le client, on peut appeler la méthode `close()` sur la socket de communication avec le client (pas celle qui écoute, à savoir `socketServer`).

[source,language='java']
----
communicationAvecClient.close();
----

=== Ecriture du programme "Client"

Créez un nouveau projet appelé "Client".

Créez une classe "Client" dans le package de votre choix puis déclarez une méthode `main()`.

Le client doit demander l'établissement d'une connexion vers l'application serveur.

Pour cela on utilise la classe `Socket` qui correspond à une socket client :

[code,language='java']
----
Socket socket = new Socket( "adresse ip ou nom hote distant", numeroDuPort );
----

Le premier paramètre correspond à l'adresse de la machine sur laquelle s'exécute l'application serveur. Le deuxième paramètre est le numéro du port que l'on souhaite contacter.

Le premier paramètre est du type `String` et peut contenir soit une adresse an forme alphanumérique (par exemple "www.google.fr") et la résolution DNS aura lieu, soit directement avec la forme numérique IP (par exemple "192.16.0.1").

Nous choisirons de se connecter à la machine "localhost" (machine locale) sur le port que nous ouvrons dans l'application "Serveur".

Si aucune exception n'est levée et que la variable `socket` est non nulle, c'est que la connexion a été correctement établie, les deux hôtes sont prêts à communiquer!

Pour fermer la connexion avec le serveur, on peut appeler la méthode `close()` sur la socket de communication.

[source,language='java']
----
socket.close();
----

=== Execution des programmes

Avant d'exécuter les deux programmes, ajoutez quelques `System.out.println(...)` pour vous rendre compte de ce qui se produit :

Côté serveur :

- avant l'ouverture du port,
- au moment où une connexion avec une application cliente est effectuée,
- avant la fermeture de la socket de communication,
- à la fin du programme.

Côté client :

- avant la tentative de connexion,
- après la réussite de la connexion,
- à la fin du programme.



== Exercice 2 - Dialogue

L'envoi et la réception de données dans et depuis une socket s'effectue en Java avec les classes `Stream`.

La classe `Socket` propose deux méthodes `getInputStream()` et `getOutputStream()` qui permettent d'avoir accès à ces flux de données.

Le programme de l'exercice 2 consiste à faire communiquer les deux programmes précédemment implémentés (Serveur et Client).

Les messages échangés auront pour but de faire demander par le client le calcul d'une addition au serveur.

Une fois la communication entre Serveur et Client établie, le client enverra deux entiers et le serveur répondra avec un entier valant la somme des deux entiers reçus.

L'échange entre le client et le serveur ne se fait qu'une seule fois, c'est à dire qu'après cet échange la communication est fermée.

=== Utilisation des Streams

==== Envoyer des données

Pour envoyer des données au programme distant, il faut d'abord récupérer l'objet représentant le flux de sortie de la socket :

[code,language='java']
----
OutputStream os = socket.getOutputStream();
----

Ce flux de sortie fonctionne exactement de la même façon qu'un `FileOutputStream`. Ainsi il possède la méthode `write()` permettant d'envoyer le contenu d'un buffer vers la partie distante.

Il sera pour notre exercice bien plus aisé de "brancher" une `ObjectOutputStream` sur le flux de sortie de la socket. Ainsi nous aurons accès aux méthodes `writeInt(...)`, `writeString(...)` etc.

[code,language='java']
----
ObjectOutputStream oos = new ObjectOutputStream( os );

// envoi de l'entier 34 dans le flux de sortie de la socket
oos.writeInt( 34 );
----

**ATTENTION!** A la différence de ce que l'on a observé avec les fichiers, il est nécessaire après avoir envoyer des octets dans le `ObjectOutputStream` de demander la _vidange_ du flux. En effet, les classes de flux ont tendance à attendre d'avoir un certain volume d'information à envoyer avant de le transmettre à la couche réseau.

Ainsi, en envoyant seulement deux entiers, le `ObjectOutputStream` va attendre d'autres données avant de les envoyer au réseau. Pour contourner ce problème, on utilise la méthode `flush()`.

==== Recevoir des données

On récupère un objet `InputStream` en appelant la méthode `getInputStream()` de la socket.

En créant en plus un objet `ObjectInputStream`, il est possible de lire les données reçu par la socket avec les méthodes `readInt()`, `readString()`...

=== Implémenter l'échange de messages entre le client et le serveur

Implémentez le code nécessaire dans les classes Serveur et Client.

Le protocole est le suivant :

- le serveur ouvre le port
- le client se connecte
- le serveur accepte la connexion
- le client envoie deux entiers dont il veut connaitre la somme (ne pas oublier le flush!)
- le serveur reçoit les deux entiers
- le serveur calcule la somme
- le serveur envoie la somme au client (ne pas oublier le flush!)
- le client reçoit l'entier représentant la somme des deux nombres
- le client affiche l'entier qu'il vient de recevoir
- le programme client ferme sa connexion et s'arrête
- le programme serveur s'arrête.

== Exercice 3 - Messagerie

On modifie les programmes précédents pour écrire une application de messagerie en direct (un 'chat').

L'algorithme consiste maintenant à avoir dans le client et le serveur deux threads s'exécutant en parallèle :

- une qui demande à l'utilisateur de saisir un message (avec la classe `Saisie`),
- une qui écoute les messages en provenance de l'autre partie et les affiche.

Implémentez ce programme.

== Exercice 4 - Jouons!

Cet exercice demande beaucoup plus de réflexion que les deux précédents, il est donc conseillé de ne pas se lancer à l'aveugle trop rapidement.

Analysez d'abord le problème, imaginez votre solution et son fonctionnement.

=== Introduction

On décide maintenant d'appliquer nos récentes découvertes en matière de réseau à notre projet Morpion.

En effet le jeu de morpion se jouant à deux joueurs, la possibilité de connecter deux programmes (un pour chaque joueur) nous permet de créer un jeu en réseau.

Le programme serveur va gérer un plateau de jeu.

Le programme client permettra à un joueur de venir jouer sur le plateau géré par le serveur. Le serveur devra surement envoyer une représentation du plateau au client pour que le joueur sur le client puisse décider de la coordonnée à laquelle il désire jouer...

Réfléchissez: quels sont les messages qui devront être échangés entre le client et le serveur. Le contenu du plateau, la coordonnée du prochain coup à jouer, un message de fin de partie peut-être.

=== Conception

Imaginez d'abord un protocole (c'est-à-dire l'ensemble des messages circulant entre le client et le serveur) permettant la réalisation de ce jeu.

Implémentez ensuite votre idée.